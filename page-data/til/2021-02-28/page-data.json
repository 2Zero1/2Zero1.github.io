{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-02-28/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"681ca96f-cf5c-5d61-adb0-f61667adb767","excerpt":"fact 저번주에 밀렸던 redux 부분과 이번주 과제를 같이 진행하였다. redux부터 난이도가 많이 올라감을 느꼈다. 강의를 듣고 따라하려니까 뭔가 할 수 있는것 같은데 잘 안되었다. 그래서 강의 내용에 나만의 목차를 만들어 부분적으로 반복 훈련하여 진행하였다. 어떻게 같은 시간 공부하고 더 많은걸 가져갈 수 있는지 찾아보고 고민해보았다. 내가 해야할 부분을 파악하고 일정을 세웠으며 처리하였다. 이번주에 약 3회 일간 회고를 작성하였다. feelings 저번주에 하지 못했던것을 1~…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>저번주에 밀렸던 redux 부분과 이번주 과제를 같이 진행하였다.</li>\n<li>redux부터 난이도가 많이 올라감을 느꼈다. 강의를 듣고 따라하려니까 뭔가 할 수 있는것 같은데 잘 안되었다. 그래서 강의 내용에 나만의 목차를 만들어 부분적으로 반복 훈련하여 진행하였다.</li>\n<li>어떻게 같은 시간 공부하고 더 많은걸 가져갈 수 있는지 찾아보고 고민해보았다.</li>\n<li>내가 해야할 부분을 파악하고 일정을 세웠으며 처리하였다.</li>\n<li>이번주에 약 3회 일간 회고를 작성하였다.</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>저번주에 하지 못했던것을 1~2일 만에 빠르게 끝낼 수 있다고 생각 했는데 착각이었다.</li>\n<li>어떻게 효율적으로 내용을 흡수 할 수 있을까란 고민을 했고, 나만의 목차를 만들어 각 목차마다 반복 숙달하였더니 이전보다 효율적으로 내용을 익힐 수 있었다. 기분이 좋다.</li>\n<li>운동을 꾸준히 하였다. 확실히 이전 보다 나아짐을 느낀다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>redux</p>\n<ul>\n<li>redux는 상태 관리자이다.</li>\n<li>상태값은 오직 액션 객체에 의해서만 변경된다.</li>\n<li>redux에서 기존 상태를 다른 상태로 변경하는 함수를 reducer라고 한다. 인자 값으로 이전 상태 객체와, action 객체를 받는다.</li>\n<li>react로 작성된 컴포넌트들을 provider안에 넣으면 하위 컴포넌트들이 provider를 통해 redux에 접근할 수 있게 된다.</li>\n<li>\n<p>hooks</p>\n<ul>\n<li>useSelector : selector callback을 전달하여, 필요한 상태를 가져올 수 있다.</li>\n<li>useDispatch : context에 포함된 dispatch를 가져오며 이를 이용해 action을 발생시킬 수 있다.</li>\n</ul>\n</li>\n<li>Presentational Components : redux를 알지 못하며 보이는 view에만 집중한다. 부모 컴포넌트로 부터 상태 또는 액션에 필요한 함수 또는 값을 받아서 사용 한다.</li>\n<li>Container Components : redux를 알고 있으며, 데이터를 가져오고 상태를 업데이트한다. presentational component에 데이터나 상태를 업데이트 하기 위한 함수를 인자로 보낸다.</li>\n</ul>\n</li>\n<li>\n<p>비동기</p>\n<ul>\n<li>promise의 진정한 가치는 callback은 호출 시점을 정할 수 없지만 promise는 resove가 되었다면 원할떄 호출이 가능하다는 것이다.</li>\n<li>async / await</li>\n<li>비동기 코드를 동기적 코드처럼 보이게 작성하게 해준다. 실제로 async 가 붙은 함수는 promise로 변한다.</li>\n<li>promise가 아닌 값을 반환하더라도 promise로 감싼 프로미스를 반환한다. await은 async 키워드가 붙은 함수 안에서만 작동하며 promise가 실행되기를 기다린다.</li>\n<li>async에서 promise가 거부되면 throw문으로 작성한 것 처럼 에러가 던져지며 try/cat로 잡을 수 있다.</li>\n<li>fetch : 이전에 비동기 웹을 위해 ajax를 사용해서 es2015이전에는 ajax를 사용하기 위해 xmlHttpRequest가 있었지만, 그 이후 fetch PI가 표준으로 등장했다.</li>\n<li>redux thunk : action creator가 액션을 반환하는 대신 함수를 반환하여 특정 액션이 실행되는 것을 지연 시키거나 조건 충족시 액션이 실행되게 할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>일정을 세울 때 각각의 일정을 크게 잡지 말고 아주 자세하게 작성한다.</li>\n<li>약 3시간 마다 30분간 걷기 운동을 할 것이다.</li>\n<li>다음주에는 매일 회고를 남길것이다.</li>\n<li>다음주도 행복하게 프로그래밍을 할것이다.</li>\n<li>다음주 부터는 dom을 공부할 것이다. 7:30 ~ 10:30 는 책을 읽고 기록할 것이다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-02-28 TIL","date":"February 28, 2021"}}},"pageContext":{"slug":"/til/2021-02-28/","previous":{"fields":{"slug":"/til/2021-02-25/"},"frontmatter":{"title":"2021-02-25 TIL","category":"TIL"}},"next":{"fields":{"slug":"/til/2021-03-03/"},"frontmatter":{"title":"2021-03-02 TIL","category":"TIL"}}}},"staticQueryHashes":["3128451518","96099027"]}