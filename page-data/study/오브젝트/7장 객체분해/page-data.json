{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/오브젝트/7장 객체분해/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5bd53758-0813-5f25-be3b-4b346d4e5f7f","excerpt":"문제를 해결하기 위해서 장기기억에서 단기기억으로 옮겨와야 한다. 그러나 문제 해결에 필요한 요소의 수가 단기 기억의 용량을 초과하는 순간 문제 해결 능력은 급격하게 떨어진다. 이를 인지 과부하(cognitive overload…","html":"<p>문제를 해결하기 위해서 장기기억에서 단기기억으로 옮겨와야 한다. 그러나 문제 해결에 필요한 요소의 수가 단기 기억의 용량을 초과하는 순간 문제 해결 능력은 급격하게 떨어진다. 이를 인지 과부하(cognitive overload)라고 한다.</p>\n<p>위의 문제를 해결하기 위해 한번에 다뤄야 할 정보의 수를 줄이고 본질적인 정보만 남겨 세부사항을 걸러내서 문제를 단순화할 수 있다. 이처럼 불필요한 정보를 제거하고 현재의 문제 해결에 필요한 핵심만 남기는 작업을 추상화라고 부른다.</p>\n<p>가장 일반적인 추상화 방법은 한 번에 다뤄야 하는 문제의 크기를 줄이는 것인데, 큰 문제를 해결 가능한 작은 문제로 나누는 작업을 분해(decomposition)라고 부른다.</p>\n<p>분해의 목적은 큰 문제를 인지 과부하의 부담없이 단기 기억안에서 한 번에 처리할 수 있는 규모의 문제로 나누는 것이다.</p>\n<p>프로그래밍 패러다임이란 적절한 추상화의 윤곽을 따라 시스템을 어떤 식으로 나눌것인지를 결정하는 원칙과 방법의 집합이다.</p>\n<h2 id=\"프로시저-추상화와-데이터-추상화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"프로시저 추상화와 데이터 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로시저 추상화와 데이터 추상화</h2>\n<p>프로그래밍 패러다임은 프로그래밍을 구성하기 위해 사용하는 추상화의 종류와 이 추상화를 이용해 소프트웨어를 분해하는 방법의 두 가지 요소로 결정된다.</p>\n<ol>\n<li>\n<p>procedure abstraction(프로시저 추상화)</p>\n<ul>\n<li>소프트웨어가 무엇을 해야하는지 추상화 한다.</li>\n<li>functional decomposition(기능 분해) 또는 알고리즘 분해라고도 한다.</li>\n</ul>\n</li>\n<li>\n<p>data abstraction(데이터 추상화)\n소프트웨어가 무엇을 알아야 하는지를 추상화한다.</p>\n<ol>\n<li>데이터를 중심으로 타입을 추상화하는 방법(type abstraction)으로 abstract data type(추상 데이터 타입)이라고 부른다.</li>\n<li>데이터를 중심으로 프로시저를 추상화(procedure abstraction)로 Object-Orient(객체지향)이라고 부른다.</li>\n<li>지금까지 객체지향 패러다임을 책임을 수행하는 자율적인 객체들의 협력 공동체를 구축하는 것으로 이야기했는데, 여기서 ‘역할과 책임을 수행하는 객체’가 바로 객체지향 패러다임이 이용하는 추상화이다.</li>\n<li>프로그래밍 언어의 관점에서 객체지향이란 데이터를 중심으로 데이터 추상화와 프로시저 추상화를 통합한 객체를 이용해 시스템을 분해하는 방법이다.</li>\n</ol>\n</li>\n</ol>\n<p>  시스템을 분해하는 방법을 결정하려면 먼저 프로시저 추상화를 중심으로 할것인지, 데이터 추상화를 중심으로 결정해야한다.</p>\n<h2 id=\"프로시저-추상화와-기능-분해\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EA%B8%B0%EB%8A%A5-%EB%B6%84%ED%95%B4\" aria-label=\"프로시저 추상화와 기능 분해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로시저 추상화와 기능 분해</h2>\n<p>기능 분해의 관점에서 추상화의 단위는 프로시저이며 시스템은 프로시저를 단위로 분해된다.</p>\n<p>프로시저는 반복적으로 실행되거나 거의 유사하게 실행되는 작업들을 하나의 장소에 모아놓음으로써 로직을 재사용하고 중복을 방지할 수 있는 추상화 방법이다.</p>\n<p>프로시저 중심의 기능 분해 관점에서 시스템은 입력 값을 계산해서 출력 값을 반환하는 수학의 함수와 동일하다. 시스템은 필요한 더 작은 작업으로 분해될 수 있는 하나의 커다란 메인함수다.</p>\n<p>전통적인 기능 분해 방법은 하향식 접근법(Top-Down Approach)를 따른다.</p>\n<p>기능 분해 방식은 기능을 중심으로 필요한 데이터를 결정한다.</p>\n<p>기능 분해를 위한 하향식 접근법은 먼저 필요한 기능을 생각하고 이 기능을 분해하고 정제하는 과정에서 필요한 데이터의 종류와 저장 방식을 식별한다. 이것은 유지보수에 다양한 문제를 야기한다.(p223)</p>\n<p>하향식 기능 분해는 논리적이고 체계적인 시스템 개발 절차를 제시하지만 문제는 우리가 사는 세계는 체계적이지고, 이상적이지고 않다는 점이다.</p>\n<h2 id=\"하향식-기능분해의-문제점\" style=\"position:relative;\"><a href=\"#%ED%95%98%ED%96%A5%EC%8B%9D-%EA%B8%B0%EB%8A%A5%EB%B6%84%ED%95%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"하향식 기능분해의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하향식 기능분해의 문제점</h2>\n<p>설계는 코드 배치 방법이며 설계가 필요한 이유는 변경에 대비하기 위한 것이다. 하지만 하향식 접근법과 기능 분해가 가지는 근본적인 문제점은 변경에 취약한 설계를 낳는다.</p>\n<ol>\n<li>\n<p>시스템은 하나의 메인함수로 구성돼 있지 않다.</p>\n<ul>\n<li>대부분의 시스템에서 하나의 메인 기능은 존재하지 않으며, 모든 기능들은 규모라는 측면에서 차이가 있을 수는 있겠지만 기능성의 측면에서 동등하게 독립적이고 완결된 하나의 기능을 표현한다.</li>\n<li>하향식 접근법은 하나의 알고리즘을 구현하거나 배치 처리하를 구현하기에는 적합하지만 현대적인 상호작용 시스템을 개발하는 데는 적합하지 않다.</li>\n<li>현대적인 시스템은 동등한 수준의 다양한 기능으로 구성된다.</li>\n</ul>\n</li>\n<li>\n<p>기능 추가나 요구사항 변경으로 인해 메인 함수를 빈번하게 수정해야 한다.</p>\n<ul>\n<li>시스템은 여러 개의 정상으로 구성되기 때문에 새로운 정상을 추가할 때마다 정상이라고 간주했던 main 함수의 내부 구현을 수정할 수밖에 없다.</li>\n</ul>\n</li>\n<li>\n<p>비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.</p>\n<ul>\n<li>\n<p>하향식 접근법은 비즈니스 로직을 설계하는 초기 단계부터 입력 방법과 출력 양식을 함께 고민하도록 강요하며 결과적으로 비즈니스로직과 사용자 인터페이스 로직이 밀접하게 결합된다.</p>\n<ul>\n<li>위와 같은 상황은 비즈니스 로직과 사용자 인터페이스가 변경되는 빈도가 다르기 때문에 자주 변경되는 사용자 인터페이스 부분을 변경하게 되면 코드가 같이 있기 때문에 비즈니스 로직까지 변경에 영향을 받는다.</li>\n</ul>\n</li>\n<li>기능을 분해하는 과정에서 사용자 인터페이스의 관심사와 비즈니스 로직의 관심사를 동시에 고려하도록 강요하기 때문에 “관심사의 분리”라는 아키텍처 설계의 목적을 달성하기 어렵다.</li>\n</ul>\n</li>\n<li>\n<p>하향식 분해는 너무 이른 시기에 함수들의 실행 순서를 고정시키기 때문에 유연성과 재사용서이 저하된다.</p>\n<ul>\n<li>하향식으로 기능을 분해하는 과정은 설계를 시작하는 시점부터 시스템이 무엇(what)을 해야하는지가 아니라 어떻게(how) 동작해야 하는지에 집중하도록 만든다.</li>\n<li>하향식 접근법의 설계는 처음부터 구현을 염두에 두기 때문에 자연스럽게 함수들의 실행 순서를 정의하는 시간 제약(temporal contraint)을 강조한다. 메인함수가 작은 함수들로 분해되기 위해서는 우선 함수들의 순서를 결정해야하기 때문이다.</li>\n<li>실행 순서나 조건, 반복과 같은 제어 구조를 미리 결정하지 않고는 분해를 진행할 수 없기 때문에 기능 분해 방식은 중앙집중 제어 스타일(centralized control style)의 형태를 띨수밖에 없다.</li>\n<li>\n<p>문제는 중요한 설계 결정사항인 함수의 제어 구조가 빈번한 변경의 대상이라는 점이며 기능이 추가되거나 변경될 때마다 초기에 결정된 함수들의 제어 구조가 올바르지 않다는 것이 판명된다.</p>\n<ul>\n<li>이를 해결할 수 있는 한가지 방법은 자주 변경되는 시간적인 제약에 대한 미련을 버리고 좀 더 앉어적인 논리적 제약(logical contraint)을 설계의 기준으로 삼는것이다.</li>\n<li>객체지향은 함수 간의 호출 순서가 아니라 객체 사이의 논리적인 관계를 중심으로 설계를 이끌어 나간다. 결과적으로 <strong><em>전체적인 시스템은 어떤 한 구성요소로 제어가 집중되지 않고 여러 객체들 사이로 제어 주체가 분산된다.</em></strong></li>\n</ul>\n</li>\n<li>하향식 접근법을 통해 분해된 함수들은 재사용하기도 어렵다. 모든 함수는 상위 함수를 분해하는 과정에서 필요에 따라 식별되며, 그에 따라 상위 함수가 강요하는 문맥(context) 안에서만 의미를 갖기 때문이다. <strong><em>재사용이라는 개념은 일반성이라는 의미를 포함한다는 점을 기억하라.</em></strong></li>\n<li>하향식 접근법을 따르는 경우 분해된 하위 함수는 상위 함수보다 문맥에 더 종속적이게 된다.</li>\n<li>위와 관련된 모든 문제의 원인은 <strong><em>결합도</em></strong>이며 함수는 상위 함수가 강요하는 문맥에 강하게 결합된다. 함수는 함께 절차를 구성하는 다른 함수들과 시간적으로 강하게 결합돼있다.</li>\n<li>강한 결합도는 시스템을 변경에 취약하게 만들고 이해하기 어렵게 만든다.</li>\n<li>가장 큰 문제는 전체 시스템의 핵심적인 구조를 결정하는 함수들이 데이터와 강하게 결합된다는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>데이터 형식이 변경될 경우 파급효과를 예측할 수 없다.</p>\n<ul>\n<li>\n<p>하향식 기능 분해의 가장 큰 문제점은 어떤 데이터를 어떤 함수가 사용하고 있는지 추적하기 어렵다는 것이다. 따라서 변경으로 인해 어떤 함수가 영향을 받을지 예상하기 어렵다.</p>\n<ul>\n<li>내 생각에 이 문제를 좀 더 정확하게 말하면 정보가 모두 노출되어 발생하는 문제라고 생각한다.</li>\n</ul>\n</li>\n<li>특히 어떤 데이터가 함수에 의존하고 있는지 파악하는 것을 어려운일이다.(p.230 예제 참고)</li>\n<li>데이터 변경으로 인한 영향을 최소화하려면 데이터와 함께 변경되는 부분과 그렇지 않은 부분을 명확하게 분리해야 한다. 이를 위해 데이터와 함께 변경되는 부분을 하나의 구현 단위로 묶고 외부에서는 제공되는 함수만 이용해 데이터에 접근해야한다. 즉 잘 정의된 퍼블릭 인터페이스를 통해 데이터에 대한 접근을 통제해야한다.</li>\n<li>이것이 바로 <strong><em>의존성 관리</em></strong>의 핵심이며 변경에 대한 영향을 최소화하기 위해 영향을 받는 부분과 받지 않는 부분을 명확하게 분리하고 잘 정의된 퍼블릭 인터페이스를 통해 변경되는 부분에 대한 접근을 통제하라.</li>\n<li>david parnas는 기능분해가 가진 본질적인 문제를 해결하기 위해 이 같은 개념을 기반으로 한 정보 은닉과 모듈이라는 개념을 제시했다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"언제-하향식-분해가-유용한가\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%ED%95%98%ED%96%A5%EC%8B%9D-%EB%B6%84%ED%95%B4%EA%B0%80-%EC%9C%A0%EC%9A%A9%ED%95%9C%EA%B0%80\" aria-label=\"언제 하향식 분해가 유용한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 하향식 분해가 유용한가?</h2>\n<p>하향식은 이미 이해된 사실을 서술하기에 적합한 방법이며 새로운 것을 개발하고, 설계하는 데는 적합한 방법이 아니다.</p>\n<p>하향식 분해는 작은 프로그램과 개별  알고리즘을 위해서는 유용한 패러다임으로 남아 있다.</p>\n<p>마지막으로 하향식 분해의 문제점을 다시 정리해보자</p>\n<ol>\n<li>설계된 소프트웨어는 하나의 함수에 제어가 집중되기 때문에 확장이 어렵다.</li>\n<li>프로젝트 초기에 설계의 본질적인 측면을 무시하고 사용자 인터페이스 같은 비본질적인 측면에 집중하게 만든다.</li>\n<li>과도하게 함수에 집중하게 함으로써 소프트웨어의 중요한 다른 측면인 데이터에 대한 영향도를 파악하기 어렵게 만든다.</li>\n<li>또한 하향식 분해를 적용한 설계는 근본적으로 재사용하기 어렵다.</li>\n</ol>","frontmatter":{"title":"오브젝트 7장","date":"May 18, 2021"}}},"pageContext":{"slug":"/study/오브젝트/7장 객체분해/","previous":{"fields":{"slug":"/til/2021-05-17/"},"frontmatter":{"title":"2021-05-17 TIL","category":"TIL"}},"next":{"fields":{"slug":"/study/하루3분 네트워크5/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 5","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}