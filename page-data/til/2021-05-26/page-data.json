{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-05-26/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"96e14ed2-0089-5733-9ef4-bbaffdbc87b3","excerpt":"fact 면접을 보러 갔다왔다. 코드 스피츠의 ooad 강의를 들었다. feelings 기술 면접만 1시간 40분동안 봤다. 면접을 계속 보고 다니면서 기술 면접 질문들도 다 비슷하고 답변하기 너무 간단한 것들만 질문만 하지 않나 싶다는 생각이 들었다. 기술력이 없는 스타트업이라서 그런가..? 그래도 현직 개발자가 면접을 보는데.. 어려운 주제를 다루지 않아서 그런건가 ..? 이유가 뭔지 생각해봐야겠다. 요즘 강의를 듣거나 책을 읽는 input…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>면접을 보러 갔다왔다.</li>\n<li>코드 스피츠의 ooad 강의를 들었다.</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>기술 면접만 1시간 40분동안 봤다. 면접을 계속 보고 다니면서 기술 면접 질문들도 다 비슷하고 답변하기 너무 간단한 것들만 질문만 하지 않나 싶다는 생각이 들었다. 기술력이 없는 스타트업이라서 그런가..? 그래도 현직 개발자가 면접을 보는데.. 어려운 주제를 다루지 않아서 그런건가 ..? 이유가 뭔지 생각해봐야겠다.</li>\n<li>요즘 강의를 듣거나 책을 읽는 input 중심의 학습만 하고 있는데 학습한걸 출력하는 학습 계획을 세워야겠다고 느꼈다.</li>\n<li>강의에서 나온 코드를 따라 쳐보고, 요구사항만 갖고 혼자 코드를 작성하고, 혼자 설명하면서 짤 수 있을때 까지 훈련해야겠다.</li>\n<li>학습을 위한 패턴? 또는 메타인지를 위한 요소들을 작성해놓고, 매일 그것을 어떻게 적용했는지 작성할 수 있는 일지를 만들어보고 싶다.</li>\n<li>tdd는 세상의 복잡한 요구사항을 만족시키는 소프트웨어를 만들기 위한 프레임워크다. 요구사항에 맞는 쉬운 테스트부터 시작해서 통과시키고 필요한 요구사항을 테스트에 점진적으로 늘려가면서 개발할 방향을 안내해주는 것이라고 느꼈다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>object 1장 정리</p>\n<ul>\n<li>우리가 원하는 것은 변경에 유연한 코드이다. 변경에 유연하기 위해선 결합도가 낮아야하며 객체사이의 의존성이 높으면 결합도가 높다고 한다. 의존성은 변경에 대한 암시를 하며, 객체가 변경될때 어떤 객체가 함께 변경될 수 있다는 사실을 내포하므로 변경에 유연한 코드를 작성하기 위해선 의존성을 최소한(단방향)으로 통제해야하며 oop에서 제공하는 방법을 이용할 수 있다.</li>\n<li>oop에서는 객체를 자율적인 존재로 만드는것을 목표로 한다. 객체를 자율적인 존재로 만들기 위해 내부 세부사항을 감추는 캡슐화를 이용한다. 캡슐화를 하기 위해선 객체가 데이터로서 사용되는게 아니라, 객체 자신이 필요한 데이터를 가져야 한다. 자신의 데이터를 갖고 연관된 행위를 갖게되면 응집도가 올라가게된다.</li>\n<li>결국 객체지향은 캡슐화를 이용해 의존성을 적절히(단방향으로) 관리해서 객체 사이의 결합도를 낮춰 변경에 유연한 코드를 작성하게한다.</li>\n</ul>\n</li>\n<li>\n<p>es6 코드스피츠</p>\n<ul>\n<li>원자성이란 더이상 쪼개지지 않는 것을 의미한다.</li>\n<li>아키텍트가 아키텍처를 만들때 의사결정하는 행위를 디자인이라고한다.</li>\n<li>\n<p>디자인 의사결정</p>\n<ul>\n<li>상태를 boolean으로 관리하는 것은 이후에 상태가 많아진다면 관리할 수 없어지는 특징이 있음.</li>\n<li>만약에 boolean이 아니라 나중에 더 복잡하게 발전할 가능성이 있다면 열거형으로 넣어야한다. 이것이 의사결정이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>일정들에 대한 피드백 어떻게 줄지 생각하기.. 좀 해라 .. 하기로 해놓고 안한다..ㅠㅠ</li>\n<li>내일은 토스 사전 테스트를 풀 생각이다. 자바스크립트 객체지향을 배운것을 최대한 적용해서 문제를 풀어봐야겠다.</li>\n<li>요즘 일정을 엉망으로 세우고 있다. 다 지키지도 못할 일정들을 만들고 있다.. 다시 일정을 정확하게 잡아야겠다.</li>\n<li>매일 일주일 단위 일정만 세우는데 한달 단위 일정도 세워야겠다.</li>\n<li>공부를 했다면 그것을 출력하는 학습을 할것이다.</li>\n<li>매일 올바른 방법으로 꾸준히 공부하자. 오늘의 나는 어제의 나보다 훨씬 좋았다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-05-27 TIL","date":"May 27, 2021"}}},"pageContext":{"slug":"/til/2021-05-26/","previous":{"fields":{"slug":"/til/2021-05-27/"},"frontmatter":{"title":"2021-05-26 TIL","category":"TIL"}},"next":{"fields":{"slug":"/study/그림으로 배우는 HTTP & Network Basic2/"},"frontmatter":{"title":"그림으로 배우는 HTTP & Network basic 2","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}