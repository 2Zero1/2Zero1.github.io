{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/generator in es6/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e8e1e80f-5be7-5f3a-b941-f479c8ce97a3","excerpt":"왜 generator가 나왔을까? 밑의 제너레이터를 작성할 수 있는가 ? iterator를 좀 더 쉽게 만들 수 있게 해주는  iterator generator 제너레이터를 사용하면 위의 코드를 밑의 코드처럼 작성할 수 있다. yield는 오직 제너레이터 안에서만 작성이 가능하며 yield를 호출 시 위의 iterator에서 next를 호출한 것 같은 효과를 일으킬 수 있다. yield뒤의 값을 return 함과 동시에 밖에서 다시 next를 호출 하기 전까지 해당 자리에서 멈추게된다. next…","html":"<h2 id=\"왜-generator가-나왔을까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-generator%EA%B0%80-%EB%82%98%EC%99%94%EC%9D%84%EA%B9%8C\" aria-label=\"왜 generator가 나왔을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 generator가 나왔을까?</h2>\n<p>밑의 제너레이터를 작성할 수 있는가 ?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cursor <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> cursor <span class=\"token operator\">*</span> cursor<span class=\"token punctuation\">;</span>\n        cursor <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      returnn <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"iterator를-좀-더-쉽게-만들-수-있게-해주는--iterator-generator\" style=\"position:relative;\"><a href=\"#iterator%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%89%BD%EA%B2%8C-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%9E%88%EA%B2%8C-%ED%95%B4%EC%A3%BC%EB%8A%94--iterator-generator\" aria-label=\"iterator를 좀 더 쉽게 만들 수 있게 해주는  iterator generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iterator를 좀 더 쉽게 만들 수 있게 해주는  iterator generator</h2>\n<p>제너레이터를 사용하면 위의 코드를 밑의 코드처럼 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cursor <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> cursor <span class=\"token operator\">*</span> cursor<span class=\"token punctuation\">;</span>\n    cursor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>yield는 오직 제너레이터 안에서만 작성이 가능하며 yield를 호출 시 위의 iterator에서 next를 호출한 것 같은 효과를 일으킬 수 있다. yield뒤의 값을 return 함과 동시에 밖에서 다시 next를 호출 하기 전까지 해당 자리에서 멈추게된다. next가 호출되면 위와 동일하게 yield가 나오는 곳까지 명령이 실행된다. 이런 현상을 서스펜션이라고 한다.</p>\n<p>한번 실행되면 종료 될때 까지 실행 되는 함수를 routine이라고 하며 제너레이터 처럼 반복문 도중에 나갔다가 다시 실행되어 들어오는 것을 corutine(코틀린의 코루틴이 아니다. 고유명사)이라고 한다.</p>\n<p>iterator는 스코프를 이용한 자유변수나 인스턴스의 변수로 관리를 했어야 됬지만 generator는 지역변수를 갱신함으로써 코드를 비교적 읽기 쉽게 만들어준다.</p>","frontmatter":{"title":"generator in ES6","date":"May 17, 2021"}}},"pageContext":{"slug":"/study/generator in es6/","previous":{"fields":{"slug":"/study/iterator in es6/"},"frontmatter":{"title":"iterator in ES6","category":"es6"}},"next":{"fields":{"slug":"/study/하루3분 네트워크5/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 5","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}