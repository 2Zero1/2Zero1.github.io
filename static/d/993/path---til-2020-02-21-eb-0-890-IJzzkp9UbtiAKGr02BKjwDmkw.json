{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"8d2bff92-6f42-53d7-a21a-1903c84490f8","excerpt":"할 일 목록 코틀린 어제 스터디 녹취록 남기기 http 스터디, 시험 http 책 읽기 완료하지 못한 목록 완료 목록 5Fs 1. Fact Kotlin Stream sequence와 stream 이전에 자바에서 사용하던 stream 특징 java에서는 collection에서 함수형 인터페이스(람다)를 사용하기 위해 도입 하였다.\n하지만 kotlin에서는 실제로 collection에도 함수형 인터페이스를 사용할수가 있다.\n그래서 kotlin 에서는 stream과 sequence…","html":"<h2 id=\"할-일-목록\"><a href=\"#%ED%95%A0-%EC%9D%BC-%EB%AA%A9%EB%A1%9D\" aria-label=\"할 일 목록 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>할 일 목록</h2>\n<ul>\n<li>코틀린 어제 스터디 녹취록 남기기</li>\n<li>http 스터디, 시험</li>\n<li>http 책 읽기</li>\n</ul>\n<h2 id=\"완료하지-못한-목록\"><a href=\"#%EC%99%84%EB%A3%8C%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EB%AA%A9%EB%A1%9D\" aria-label=\"완료하지 못한 목록 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료하지 못한 목록</h2>\n<h2 id=\"완료-목록\"><a href=\"#%EC%99%84%EB%A3%8C-%EB%AA%A9%EB%A1%9D\" aria-label=\"완료 목록 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료 목록</h2>\n<h2 id=\"5fs\"><a href=\"#5fs\" aria-label=\"5fs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5Fs</h2>\n<h3 id=\"1-fact\"><a href=\"#1-fact\" aria-label=\"1 fact permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Fact</h3>\n<h4 id=\"kotlin-stream\"><a href=\"#kotlin-stream\" aria-label=\"kotlin stream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin Stream</h4>\n<h5 id=\"sequence와-stream\"><a href=\"#sequence%EC%99%80-stream\" aria-label=\"sequence와 stream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sequence와 stream</h5>\n<h6 id=\"이전에-자바에서-사용하던-stream-특징\"><a href=\"#%EC%9D%B4%EC%A0%84%EC%97%90-%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8D%98-stream-%ED%8A%B9%EC%A7%95\" aria-label=\"이전에 자바에서 사용하던 stream 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전에 자바에서 사용하던 stream 특징</h6>\n<p>java에서는 collection에서 함수형 인터페이스(람다)를 사용하기 위해 도입 하였다.\n하지만 kotlin에서는 실제로 collection에도 함수형 인터페이스를 사용할수가 있다.\n그래서 kotlin 에서는 stream과 sequence는 굉장히 유사하다. sequence로써 사용한다면 kotlin의 sequence가 제공하는 메소드를 사용하는 것이고, stream 형태로 사용하면 java의 stream 메소드 형태로 사용 하는 것이다.</p>\n<p> Stream</p>\n<ol>\n<li>java에서는 collection을 stream 형태로 만들어서 사용 했어야 한다.</li>\n<li>stream은 자료구조가 아니다. 그래서 자료를 저장하기 위해선 collect.(Collectors.toList()) 의 도움을 받아 컬력션 형태만들어 줘야한다.</li>\n<li>stream은 컬렉션과 다르게 내부 값이 완성적이지 않다. 내부에는 함수만 갖고, 실행할 때 함수를 사용하여 값을 가져오는 형태이다.</li>\n<li>stream형태로 한번 사용하고 나면 stream이 닫히기 때문에 다시 사용하기 위해선 재생성 해줘야 한다.(sequence와 같이 iterator 형태가 아니다.)</li>\n</ol>\n<p>sequence</p>\n<ol>\n<li>sequence는 각 함수를 넣는건가 어떤 형식으로 들어갈까? <a href=\"https://2zero1.github.io/study/asSequence/\">https://2zero1.github.io/study/asSequence/</a> 이곳에서 정리해봤다.</li>\n<li>sequence는 사실 인터페이스로, Iterator 인터페이스를 상속받은 iterator 추상 메서드 한개 밖에 존재하지 않는다. 내부 구현을 살펴보면 모든 iterable이나 array에 asSequence 메서드가 존재하며 해당 iterable이나 array를 사용혀아 iterator를 만들어 Sequence인터페이스를의 iterator메소드의 리턴값으로 갖는 인터페이스 구현을 한다.(이부분 더 공부해야함)</li>\n<li>sequence 또한 iterator 처럼 한번 흘러가면 끝이다. next()로 한번 넘어가면 그만이다. 하지만 stream과 다르게 foreach를 사용하며 여러번 재사용이 가능하다. foreach 내부를 보면 sequence를 for (a in sequence) 형태로 넣고 있다. sequenec가 iterator 인터페이스를 상속받지도 않고 단지 내부에 iterator 라는 추상 메서드가 있는데 어떻게 iterator가 될까 ?  이 부분도 깊게 공부해봐야겠다.</li>\n</ol>\n<h4 id=\"http-약점\"><a href=\"#http-%EC%95%BD%EC%A0%90\" aria-label=\"http 약점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 약점</h4>\n<ol>\n<li>\n<p>http의 약점</p>\n<ul>\n<li>평문(암호화 하지 않은) 통신이기 때문에 도청이 가능하다. TCP/IP 구조의 통신 내용은 전부 통신 경로의 도중에 엿볼 수 있다.</li>\n<li>\n<p>통신 상대를 확인하지 않기 때문에 위장 가능하다.</p>\n<ul>\n<li>누구나 리퀘스트 할 수 있기 때문에 실제로 의도한 송신자인지 알 수 없다.</li>\n</ul>\n</li>\n<li>완전성을 증명할 수 없기 때문에 변조가 가능하다. 리퀘스트나 리스폰스가 발신된 후에 상대가 수신할 때까지의 사이에 변조되었더라도 변조된 사실을 알 수없다. 공격자가 도중에 요청이나 응답을 빼았아 변조하는 공격인 man in the middle attack이 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>위의 약점들의 보완 방법</p>\n<ol>\n<li>\n<p>도청</p>\n<ul>\n<li>통신 암호화</li>\n<li>컨텐츠 암호화</li>\n</ul>\n</li>\n<li>\n<p>위장</p>\n<ul>\n<li>상대를 확인하는 증명서</li>\n</ul>\n</li>\n<li>\n<p>완전성</p>\n<ul>\n<li>sha-1이나 md5 같은 해시함수로 해시값을 통신 확인.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>HTTPS = HTTP + 암호화 + 인증 + 완전성 보호</p>\n<ol>\n<li>\n<p>암호화 방식</p>\n<ul>\n<li>\n<p>공통키 암호화 방식(symetic)</p>\n<ul>\n<li>클라이언트 서버가 동일한 암호 key를 갖고 내용을 키로 암호화 하여 통신하는 방법.</li>\n</ul>\n</li>\n<li>\n<p>공개키 암호화 방식(asymentic)</p>\n<ul>\n<li>한쌍의 key pair를 가진다.public key , private key라고 한다.</li>\n<li>public key로 암호화 하면 private키로만 복호화가 가능하고, private key로 암호화 하면 public key로만 복호화가 가능하다.</li>\n<li>private key로 public key를 생성할 수 있으며 반대로는 불가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>공통키를 어떻게 교환할까</p>\n<ul>\n<li>문제 : 공통키를 외부에 노출하면 누구나 암호화된 것을 볼 수 있기 때문에 전송의 문제가 된다.</li>\n<li>해결 : 서버가 개인키를 갖고, 공개키를 클라이언트에게 주고 클라이언트에게 개인키로 암호화된 공통키를 전송한다. 클라이언트는 공개키로 공통키를 얻어 통신할 수 있음.</li>\n<li>\n<p>장점</p>\n<ul>\n<li>공통키에 비해 공개키는 연산이 느리기 때문에 위와 같은 방법을 사용하면 공통키의 빠른 암호 복호화 속도로 통신이 가능함.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HTTPS는 공통키 공개키 두가지 방법을 모두 사용한다.</li>\n<li>근데 실제로 완전성 보호에 대한 이야기는 나와있지 않는듯 하다.(이부분은 생각해보자.)</li>\n</ol>\n</li>\n<li>\n<p>공개키가 내가 원하는 서버의 공캐기인지 증명할 수 있는 증명서</p>\n<ul>\n<li>문제 : 클라이언트는 자신이 원하는 서버의 공개키인지 알수가 없다. 도중에 해커가 자신의 공개키를 넘겨줄 수도 있기 때문이다.</li>\n<li>해결 : 인증 기관(Certificate Authority)과 그 기관이 발행하는 공개키 증명서를 이용한다.</li>\n<li>\n<p>절차</p>\n<ol>\n<li>서버의 공개키를 인증기관에 등록한다</li>\n<li>인증 기관의 비밀키로 서버의 공개키에 디지털 서명(암호화)으로 공개키 증명서를 작성 등록한다.</li>\n<li>클라이언트는 서버의 공개키 증명서를 입수하고, 디지털 서명을 인증 기관의 공개키로 검증하고, 공개키가 진짜인지 확인한다.</li>\n<li>서버의 공개키로 암호화 해서 메시지를 서버에 전송한다.</li>\n<li>서버의 비밀키로 클라가 전송한 메시지를 복호화 한다.</li>\n</ol>\n</li>\n<li>인증 기관은 서버들이 신뢰성을 갖는지 확인하고, 사용자들이 볼 수 있도록 증명서에 회사의 정보를 넣기도 한다. 그것을 EV SSL 증명서라고 한다.</li>\n</ul>\n</li>\n<li>\n<p>클라이언트를 확인하는 클라이언트 증명서</p>\n<ul>\n<li>문제 : 서버도 클라이언트가 실제로 알고있는 클라이언트인지 증명할 수가 없다.</li>\n<li>해결 : 클라이언트를 확인하는 클라이언트 증명서를 사용한다.</li>\n<li>\n<p>단점</p>\n<ol>\n<li>증명서를 유료로 구입해야 된다.</li>\n</ol>\n</li>\n<li>사용 예 : 은행 공인인증서.</li>\n</ul>\n</li>\n<li>\n<p>인증기관에 전적으로 의존적</p>\n<ul>\n<li>결국 위의 모든 방법은 인증기간이 얼마나 성실히 일을 잘하냐에 따라 달려있다. 잘못된 인증을 하게 되면 문제가 될 수 있다.</li>\n<li>증명서를 무효화 하는 증며엇 취소 리스트(CRL)구조나 루트 인증기관을 클라이언트에서 삭제하는 대책이 있지만, 시간이 오래걸리고 그동안 피해자가 생길 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>쓰레기 인증 기관</p>\n<ul>\n<li>OpelSSL 등의 소프트웨어를 사용하면 누구든지 인증 기관을 구축할 수 있어서 서버 증명서를 발행할 수 있다.</li>\n<li>이것을 나야 나 증명서라고 하는데 위장의 가능성이 크다.</li>\n<li>마이너 인증 기관 또한 나야나 증명서가 될 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>HTTPS 통신 절차</p>\n<ol>\n<li>클라이언트가 SSL 통신을 시작함. 메시지에 클라이언트가 제공하는 SSL 버전과 암호 suite(사용할 수 있는 암호방식)로 불리는 리스트 등이 포함된다.</li>\n<li>server는 클라이언트와 같이 SSL 버전과 클라에서 받은 암호방식중 선택하여 알려준다.</li>\n<li>서버가 certificate 메시지를 송신한다. 메시지에는 공개키 증명서가 포함되있다.</li>\n<li>서버가 최초의 SSL negotiation 부분이 끝났음을 통지하는 메시지를 전송한다.</li>\n<li>Client Key Exchange 메시지로 응답하고, 메시지에는 통신을 암호화 하는데 사용하는 Pre-Master secret 이 포함되어져 있다. 이 메시지는 3의 공개키 증명서에서 꺼낸 공개키로 암호화 되어 있다.</li>\n<li>클라이언트는 Change Cipher Spec 메시지를 송신하며 이 메시지에는 이 메시지 이후의 통신은 암호키를 사용해서 진행한다는 것을 나타낸다.</li>\n<li>클라이언트는 finished 메시지를 송신하며 접속 전체의 체크값을 포함한다. 협상을 성공했는지 어떤지는 서버가 이 메시지를 복호화할 수 있는지 아닌지가 결정한다.</li>\n<li>서버도 change cipher spec 메시지를 전송한다.</li>\n<li>서버에서도 finished 메시지를 전송한다</li>\n<li>서버와 클라의 finished 메시지 교환이 완료 되면 SSL에 의해 접속이 확립된다. 이제부터 HTTP리퀘스트를 송신하고 통신한다.</li>\n<li>서버가 응답한다</li>\n<li>마지막에 접속을 끊을경우 close_notify메시지를 전송한다.</li>\n<li>어플리케이션 계층의 데이터를 송신할 때에는 MAC(Message Athentication Code)라고 부르는 메시지 다이제스트를 붙힐수 있다.</li>\n</ol>\n</li>\n<li>\n<p>TLS, SSL의 단점.</p>\n<ul>\n<li>connection을 맺는 절차가 길어 통신속도가 느릴 수 있다.</li>\n<li>암호화 복호화를 하는 시간으로 자원을 많이 소요한다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2feelings\"><a href=\"#2feelings\" aria-label=\"2feelings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.Feelings</h3>\n<ul>\n<li>오늘 추론을 해보면서 공부를 해봤는데 범위를 넓게 공부하진 못했지만, 내가 궁금했던 부분을 대부분 해소할 수 있어서 좋았다.</li>\n<li>코틀린 금방 정리해서 끝낼줄 알았는데 한참 걸릴거 같다.</li>\n</ul>\n<h3 id=\"3findings\"><a href=\"#3findings\" aria-label=\"3findings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.Findings</h3>\n<ul>\n<li>kotlin의 sequence가 채이닝 될때 어떻게 자바로 구현되어져 있는지 알게 되었다. 내부에서 데코레이터 패턴을 이용한다.</li>\n<li>sequence과 stream이 비슷하다고 하는데 아직 지식이 얕아서 잘 모르겠다.</li>\n</ul>\n<h3 id=\"4future-action-plan\"><a href=\"#4future-action-plan\" aria-label=\"4future action plan permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.Future Action Plan</h3>\n<ul>\n<li>내일은 내가 현재 하고 있는 부분을 추적 하기 쉽도록 계획을 세워놓고 현재 어떤 부분을 공부하고 있는지 기록 하면서 해야겠다.</li>\n</ul>\n<h3 id=\"5feedback\"><a href=\"#5feedback\" aria-label=\"5feedback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.FeedBack</h3>","frontmatter":{"title":"2020-02-21 TIL","date":"February 21, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/til/2020-02-21/","previous":{"fields":{"slug":"/til/2020-02-20/"},"frontmatter":{"title":"2020-02-20 TIL","category":"TIL"}},"next":{"fields":{"slug":"/til/2020-02-22/"},"frontmatter":{"title":"2020-02-22 TIL","category":"TIL"}}}}