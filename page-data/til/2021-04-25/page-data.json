{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-04-25/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"b2c43923-52e3-51e7-8744-c33618add342","excerpt":"이번주의 회고를 TIL에 작성해본다. fact 이번주는 역시 TIL이 많이 비어있다. 목요일에 알바를 갔다왔다. 아는 형이 나의 성향을 분석해주었다. object와 테스트 주도 개발로 배우는 객체지향 설계와 실천을 읽었다. 너무 밀렸다. 폭풍의 속도로 읽어야겠다. 결합도와 응집도에 대해 정리해보았다. https://2zero1.github.io/study/%EA%B2%B0%ED%95%A9%EB%8F%84&%EC%9D%91%EC%A7%91%EB%8F%84/ feelings…","html":"<p>이번주의 회고를 TIL에 작성해본다.</p>\n<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>이번주는 역시 TIL이 많이 비어있다.</li>\n<li>목요일에 알바를 갔다왔다.</li>\n<li>아는 형이 나의 성향을 분석해주었다.</li>\n<li>object와 테스트 주도 개발로 배우는 객체지향 설계와 실천을 읽었다. 너무 밀렸다. 폭풍의 속도로 읽어야겠다.</li>\n<li>결합도와 응집도에 대해 정리해보았다. <a href=\"https://2zero1.github.io/study/%EA%B2%B0%ED%95%A9%EB%8F%84&#x26;%EC%9D%91%EC%A7%91%EB%8F%84/\">https://2zero1.github.io/study/%EA%B2%B0%ED%95%A9%EB%8F%84&#x26;%EC%9D%91%EC%A7%91%EB%8F%84/</a></li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>이번주는 주간 계획을 세우지 않아서 그런지 무엇을 했는지 잘 모르겠다.</li>\n<li>알바를 갔다왔는데 꽤 힘들었다. 근데 나름 새로운 경험이었다. 근데 처음 시작하는 프로젝트라 그런지 헛점이 많아 보였다. 나의 피드백을 최대한 전달했고 재미있었다.</li>\n<li>오늘 아는 형이 나의 성향을 분석해주었는데 많은 부분을 공감하고 재미있었다. 부족하거나 약한 부분을 매울 수 있는 패턴을 만들어봐야겠다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>오브젝트</p>\n<ul>\n<li>\n<p>모듈이 만족해야할 3가지</p>\n<ul>\n<li>제대로 실행되야함</li>\n<li>변경이 용이해야함.</li>\n<li>이해하기 쉬워야함.</li>\n</ul>\n</li>\n<li>객체가 수동적이라면 코드가 읽기가 어려우며 객체들의 세부사항을 알고 이용하기 때문에 사용하는 객체는 세부사항이 확정됬다는 가정하에만 동작을 하며, 만약에 사용하는 객체들이 변경된다면 해당 객체는 반드시 변경되야하는 문제가 발생한다.</li>\n<li>의존성이란 어떤 객체가 변경될 때 그 객체에게 의존하는 다른 객체도 함께 변경될 수 있다는 사실이 내포되있다.</li>\n<li>객체지향 설계는 서로 의존하면서 협력하는 객체들의 공동체를 구축하는 것이다. 따라서 우리의 목표는 애플리케이션의 기능을 구현하는데 필요한 최소한의 의존성만 유지하고 불필요한 의존성을 제거하는 것이다.</li>\n<li>객체 사이의 의존성이 과한 경우를 결합도(coupling)가 높다고 한다.</li>\n<li>코드를 이해하기 어려운 이유는 자신의 일을 스스로 처리해야 한다는 우리의 직관을 벗어나기 때문이다. 해결 방법은 너무 세세한 부분까지 알지 못하도록 정보를 차단하며 각 객체를 자율적인 존재로 만들면 된다.</li>\n<li>개념적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 캡슐화(encapsulation)라고 하며 캡슐화의 목적은 변경하기 쉬운 객체를 만드는 것이다.</li>\n<li>캡슐화를 통해 객체를 내부로의 접근을 제한하면 객체와 객체 사이의 결합도를 낮출 수 있어 설계를 좀 더 쉽게 변경할 수 있다.</li>\n<li>객체를 인터페이스와 구현으로 나누고 인터페이스만을 공개하는 것은 객체 사이의 결합도를 낮추고 변경하기 쉬운 코드를 작성하기 위해 따라야 하는 가장 기본적인 설계 원칙이다.</li>\n<li>밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도(cohesion)가 높다고 한다.</li>\n<li>객체의 응집도를 높이기 위해선 객체 스스로 자신의 데이터를 책임져야한다.</li>\n<li>프로세스와 데이터를 별도의 모듈에 위치시키는 방식을 절차적 프로그래밍(procedural programming)이라고 한다.</li>\n<li>변경하기 쉬운 설계는 한 번에 하나의 클래스만 변경할 수 있는 설계다. 절차적 프로그래밍은 프로세스가 필요한 모든 데이터에 의존해야 한다는 근본적인 문제점때문에 변경에 취약할 수밖에 없다.</li>\n<li>데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍하는 방식을 객체지향 프로그래밍이라고 한다.</li>\n<li>훌륭한 객체지향 설계의 핵심은 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것이다.</li>\n<li>객체지향 설계에서 각 객체에 책임이 적절하게 분배되며 각 객체는 자신을 스스로 책임진다</li>\n<li>객체가 어떤 데이터를 가지느냐보다 객체에 어떤 책임을 할당할 것이냐에 초점을 맞춰야한다.</li>\n<li>세부사항을 객체 내부로 캡슐화하는 것은 객체의 자율성을 높이고 응집도 높은 객체들의 공동체를 창조할 수 있게 한다.</li>\n<li>설계란 코드를 배치하는것이다.</li>\n<li>변경을 수용할 수 있는 설계가 중요한 이유는 요구사항이 항상 변경되기 때문이다.</li>\n<li>변경 가능한 코드란 이해하기 쉬운 코드다.</li>\n<li>훌륭한 객체지향 설계란 협력하는 개체 사이의 의존성을 적절하게 관리하는 설계다.</li>\n<li>객체지향의 장점은 객체를 이용해 도메인의 의미를 풍부하게 표현 할 수 있다는 것이다.</li>\n<li>차이에 의한 프로그래밍 : 부모 클래스와 다른 부분만을 추가해서 새로운 클래스를 쉽고 빠르게 만드는 방법.</li>\n<li>차이에 의한 프로그래밍은 하면 안된다.</li>\n<li>다형성이란 동일한 메시지를 수신했을때 객체의 타입에 따라 다르게 응답할 수 있는 능력을 의미한다.</li>\n<li>다형성을 구현하는 방법은 많지만 메시지에 응답하기 위해 실행될 메서드를 컴파일 시점이 아닌 실행 시점에 결정한다는 공통점이 있다. 이것을 lazy binding 또는 dynamic binding이라고 한다.</li>\n<li>다형성을 이용하면 동일한 인터페이스를 공유하는 클래스들을 하나의 타입 계층으로 묶을 수 있다.</li>\n<li>구현 상속(서브 클래싱) : 순수하게 코드를 재사용하기 위한 목적으로 상속을 사용하는 것.</li>\n<li>인터페이스 상속(서브 타이핑) : 다형적인 협력을 위해 부모 클래스와 자식 클래스가 인터페이스를 공유할 수 있도록 하는 상속</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>오브젝트 4장까지 읽고 코드 따라치고 책 안보고 개선해보기</li>\n<li>테스트 주도 개발로 배우는 객체지향 설계와 실천을 14장까지 읽는다. 약 100페이지</li>\n<li>오브젝트를 읽으면 느끼는 점은 계속 똑같은 내용을 다른 방식으로 설명한다는 것이다. 위에서 작성한 것중 핵심 내용을 정리해봐야겠다.</li>\n<li>프로젝트 부분 계속해서 문제 있는 부분을 개선한다. 테스트를 어떻게 해야할지 모르는 부분은 리뷰어님들에게 직접 질문해봐야겠다.</li>\n<li>프로 자바스크립트 테크닉 책을 50 페이지 읽고 코드를 쳐보면서 실습한다.</li>\n<li>위의 목표들을 일별로 나눠 일정을 세운다.</li>\n<li>\n<p>나의 문제 점들과 해결할 패턴</p>\n<ul>\n<li>\n<p>하다가 뭔가 잘 안되면 시간이 지연되고 기분이 나빠지는 문제</p>\n<ul>\n<li>무엇이 잘 안된다면 진정하고 문제가 정확하게 무엇인지 파악한 후에 어떻게 해결할지 계획(학습을 한다던지 찾아본다던지)을 세우고 진행한다.</li>\n</ul>\n</li>\n<li>\n<p>목표를 다 이루지 못했다면 기분이 나빠지는 문제</p>\n<ul>\n<li>진정하고 무엇이 목표를 다 이루지 못하게 하는 문제였는지 고민해보고 나의 방법에 문제가 있다면 동일한 문제가 발생할 경우 어떻게 해야 좋을지 패턴을 만들고 실천함. 화내지 말고 자책하지 말것.</li>\n</ul>\n</li>\n<li>\n<p>매번 내가 잘하고 있는지 의심하는 문제</p>\n<ul>\n<li>학습을 하거나 어떤 행위를 할때 내가 어떻게 공부할 것인지 기록해둘것. 해본 후에 어떤점이 안좋았다면 다른 방법을 이용해보며 그것 또한 기록할것. 내가 좋은 결과를 내기 위해 어떤 방법으로 할지 기록하고 매번 피드백을 할것.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-04-25 TIL","date":"April 25, 2021"}}},"pageContext":{"slug":"/til/2021-04-25/","previous":{"fields":{"slug":"/retrospectives/코드숨 회고/"},"frontmatter":{"title":"코드숨 리액트 회고","category":"회고"}},"next":{"fields":{"slug":"/study/결합도&응집도/"},"frontmatter":{"title":"2021-04-25 결합도와 응집도","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}