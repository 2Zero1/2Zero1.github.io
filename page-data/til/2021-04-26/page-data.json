{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-04-26/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"63dd000a-84cb-5738-81e8-6b06093315f0","excerpt":"이번주의 회고를 TIL에 작성해본다. fact 오늘 오브젝트 1,2강에서 나오는 코드들을 안보고 쳐보려고했는데 않아서 보면서 따라쳤다. ㅎㅎ 오브젝트 3강을 읽었다. tdd & 객체지향 책을 40 페이지 읽었다. 프로젝트에 리팩터링 해야할 부분을 리스트업했다. feelings 이전에 스터디했던 오브젝트를 다시 읽고있는데 소설책 읽는것처럼 재미있다. 이전에는 무슨 말인지 안간힘을 써도 이해가 잘 안되던 부분들이 그냥 읽어도 이해가 되서 재미있었다. tdd…","html":"<p>이번주의 회고를 TIL에 작성해본다.</p>\n<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>오늘 오브젝트 1,2강에서 나오는 코드들을 안보고 쳐보려고했는데 않아서 보면서 따라쳤다. ㅎㅎ</li>\n<li>오브젝트 3강을 읽었다.</li>\n<li>tdd &#x26; 객체지향 책을 40 페이지 읽었다.</li>\n<li>프로젝트에 리팩터링 해야할 부분을 리스트업했다.</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>이전에 스터디했던 오브젝트를 다시 읽고있는데 소설책 읽는것처럼 재미있다. 이전에는 무슨 말인지 안간힘을 써도 이해가 잘 안되던 부분들이 그냥 읽어도 이해가 되서 재미있었다.</li>\n<li>tdd &#x26; 객체지향 책을 읽는데 어려워서 그런지 졸렸다. 그래도 어렵다고 대충 읽지 않고 최대한 이해하려고 노력하면서 읽었다.</li>\n<li>오브젝트를 다시 읽으니까 책이 어떻게 객체지향설계를 하는지 단계별로 설명해주고 있는것을 느꼈다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>오브젝트</p>\n<ul>\n<li>\n<p>비슷한 용어</p>\n<ul>\n<li>행동, 책임, </li>\n</ul>\n</li>\n<li><strong><em>객체지향 패러다임의 관점에서 핵심은 role, responsibility, collaboration이다.</em></strong></li>\n<li>객체지향의 본질은 협력하는 객체들의 공동체를 창조하는것이며, 객체지향 설계의 핵심은 협력을 구성하기 위해 적절한 객체를 찾고 적절한 책임을 할당하는 과정에서 드러난다. 클래스와 상속은 객체들의 책임과 협력이 어느정도 자리를 잡은 후에 사용할 수 있는 구현 메커니즘이다.</li>\n<li>객체들이 어플의 기능을 구현하기 위해 수행하는 상호작용을 협력이라고 한다.</li>\n<li>객체가 협력에 참여하기 위해 수행하는 로직은 책임이라고 부른다. <strong><em>객체들이 협력 안에서 수행하는 책임들이 모여 객체가 수행하는 역할을 구성한다.</em></strong></li>\n<li>협력은 객체지향의 세계에서 기능을 구현할 수 있는 유일한 방법이다. 두 객체 사이의 협력은 하나의 객체가 다른 객체에게 도움을 요청할 때 시작된다.</li>\n<li>객체를 자율적으로 만드는 가장 기본적인 방법은 내부 구현을 캡슐화하는 것이다.</li>\n<li>자율적인 객체는 자신에게 할당된 책임을 수행하던 중에 필요한 정보를 알지 못하거나 외부의 도움이 필요한 경우 적절한 객체에게 메시지를 전송해서 협력을 요청한다.</li>\n<li>객체란 상태와 행동을 함께 캡슐화하는 실행 단위이다.</li>\n<li>어플안에 어떤 객체가 필요하면 그 이유는 단 하나여야 한다. 그 객체가 어떤 협력에 참여하고 있기 때문이다. 객체가 협력에 참여할 수 있는 이유는 협력에 필요한 적절한 행동을 보유하고 있기 때문이다.</li>\n<li><strong><em>객체의 행동을 결정하는 것은 객체가 참여하고 있는 협력이다.</em></strong></li>\n<li><strong><em>협력은 객체가 필요한 이유와 객체가 수행하는 행동의 동기를 제공한다.</em></strong></li>\n<li><strong><em>객체의 행동을 결정하는 것이 협력이라면 객체의 상태를 결정하는 것은 행동이다.</em></strong></li>\n<li><strong><em>객체의 상태는 그 객체가 행동을 수행하는 데 필요한 정보가 무엇인지로 결정된다.</em></strong></li>\n<li>객체가 참여하는 협력이 객체를 구성하는 행동과 상태 모두를 결정한다.</li>\n<li>협력은 객체를 설계하는 데 필요한 문맥(context)를 제공한다.</li>\n<li>협력에 참여하기 위해 객체가 수행하는 행동을 책임이라고 한다.</li>\n<li><strong><em>책임이란 객체에 의해 정의되는 응집도 있는 행위의 집합으로, 객체가 유지해야 하는 정보와 수행할 수 있는 행동에 대해 개략적으로 서술한 문장이다.</em></strong></li>\n<li>\n<p>객체의 책임과 권한</p>\n<ul>\n<li>\n<p>하는것(책임)</p>\n<ul>\n<li>객체를 생성 또는 계산을 수행하는 등의 스스로 하는것</li>\n<li>다른 객체의 행동을 시작시키는 것</li>\n<li>다른 객체의 할동을 제어하고 조절하는 것.</li>\n</ul>\n</li>\n<li>\n<p>아는것 (권한)</p>\n<ul>\n<li>사적인 정보에 관해 아는 것</li>\n<li>관련된 객체에 관해 하는 것</li>\n<li>자신의 유도하거나 계산할 수 있는 것에 아는 것</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>협력 안에서 객체에게 할당한 책임이 외부의 인터페이스와 내부의 속성을 결정한다.</li>\n<li>객체는 자신이 맡은 책임을 수행하는 데 필요한 정보를 알고 있을 책임이 있다.</li>\n<li>객체는 자신이 할 수 없는 작업을 도와줄 객체를 알고 있을 책임이 있다.</li>\n<li>어떤 책임을 수행하기 위해 그 책임을 수행하는데 필요한 정보도 알아야 할 책임이 있다.</li>\n<li>협력이 중요한 이유는 객체에게 할당할 책임을 결정할 수 있는 문맥을 제공하기 때문이다.</li>\n<li>자율적인 객체를 만드는 가장 기본적인 방법은 책임을 수행하는 데 필요한 정보를 가장 잘 알고 있는 전문가에게 그 책임을 할당하는 것이다. 이를 책임 할당을 위한 INFORMATION EXPERT(정보 전문가) 패턴 이라고 한다.</li>\n<li><strong><em>협력을 설계하는 출발점은 시스템이 사용자에게 제공하는 기능을 시스템이 담당할 하나의 책임으로 바라보는 것이다. 객체지향 설계는 시스템의 책임을 완료하는 데 필요한 더 작은 책임을 찾아내고 이를 객체들에게 할당하는 반복적인 과정을 통해 모양을 갖춰간다.</em></strong></li>\n<li>객체가 책임을 수행하게 하는 유일한 방법은 메시지를 전송하는 것이므로 책임을 할당한다는 것은 메시지의 이름을 결정하는 것과 같다.</li>\n<li>객체지향 설계는 협력에 필요한 메시지를 찾고 메시지에 적절한 객체를 선택하는 반복적인 과정을 통해 이뤄지며 이렇게 결정된 메시지가 객체의 퍼블릭 인터페이스를 구성한다.</li>\n<li>정보 전문가에게 책임을 할당하는 것만으로도 상태와 행동을 함께 가지는 자율적인 객체를 만들 가능성이 높아진다.</li>\n<li>책임을 갖고 책임을 수행할 적절한 객체를 찾아 책임을 할당하는 방식으로 협력을 설계하는 방법을 책임 주도 설계라고 한다.</li>\n<li>메시지가 객체를 결정한다는 것이고, 다른 하나는 행동이 상태를 결정한다는 것이다.</li>\n<li>\n<p>메시지가 객체를 선택하게 해야하는 두가지 이유</p>\n<ul>\n<li>객체가 최소한의 인터페이스를 가질 수 있게된다.</li>\n<li>충분히 추상적인 인터페이스를 가질 수 있게 된다.</li>\n</ul>\n</li>\n<li><strong><em>얼마나 적절한 객체를 창조했느냐는 얼마나 적절한 책임을 할당했느냐에 달려있고, 책임이 얼마나 적절한지는 협력에 얼마나 적절한가에 달려있다.</em></strong></li>\n<li>개별 객체의 상태와 행동이 아닌 시스템의 기능을 구현하기 위한 협력에 초점을 맞춰야만 응집도가 높고 결합도가 낮은 객체들을 창조할 수 있다. 상태는 단지 객체가 행동을 정상적으로 수행하기 위해 필요한 재료일 뿐이다.</li>\n<li><strong><em>객체가 어떤 특정한 협력 안에서 수행하는 책임의 집합을 역할이라고 부른다.</em></strong></li>\n<li>협력을 모델링할 때는 특정한 객체가 아니라 역할에게 책임을 할당한다고 생각하는게 좋다.</li>\n<li>\n<p>예제</p>\n<ol>\n<li>영화를 예매할 수 있는 적절한 역할이 무엇인가 찾는것</li>\n<li>역할을 수행할 객체로 Screening 인스턴스를 선택하는 것이다</li>\n<li>역할에 이름을 특별한 이름을 부여하지 않았지만 실제로는 익명의 역할을 찾고 그 역할을 수행할 수 있는 객체를 선택하는 방식으로 설계가 진행된것이다.</li>\n</ol>\n</li>\n<li>역할이 중요한 이유는 역할을 통해 유연하고 재사용 가능한 협력을 얻을 수 있기 때문이다.</li>\n<li><strong><em>협력 안에서 두 종류의 객체를 교대로 바꿔 끼울 수 있는 일종의 슬롯을 생각할 수 있는데, 이 슬롯이 바로 역할이다.</em></strong></li>\n<li>동일한 책임을 수행하는 역할을 기반으로 두 개의 협력을 하나로 통합할 수 있다는 것이다. 따라서 역할을 이용하면 불필요한 중복 코드를 제거할 수 잇다.</li>\n<li><strong><em>협력의 관점에서 추상 클래스와 인터페이스는 구체 클래스들이 따라야 하는 책임의 집합을 서술한 것이다.</em></strong></li>\n<li>\n<p>추상 클래스는 공통의 변수가 있을 경우, 템플릿 메서드를 사용하여 구현한다.</p>\n<ul>\n<li>영화 예매 시스템에서 DiscountPolicy는 추상클래스로 구현했는데 이 역할을 수행할 수 있는 모든 객체들이 공유하는 상태와 행동의 기본 구현이 존재하기 때문이다.</li>\n</ul>\n</li>\n<li>discountCondition의 경우엔 공통의 구현이 필요 없고 단지 책임의 목록만 정의하면 되기 때문에 인터페이스로 구현했다.</li>\n<li>역할이 다양한 종류의 객체를 수용할 수 있는 일종의 슬롯이자 구체적인 객체들의 타입을 캡슐화하는 추상화라는 것이다.</li>\n<li>역할은 객체를 추상화해서 객체 자체가 아닌 협력에 초점을 맞출 수 있게 한다.</li>\n<li>협력에 적합한 책임을 수행하는 대상이 한 종류라면 간단하게 객체로 간주한다. 만약 여러 종류의 객체들이 참여할 수 있다면 역할이라고 부르면 된다.</li>\n<li>역할을 가리켜 실행되는 동안 협력 안에서 각자의 위치를 가지는 객체들에 대한 별칭이라고 정의 하기도 한다.</li>\n<li>협력을 구성하기 위해 역할에 적합한 객체가 선택되며, 객체는 클래스를 이용해 구현되고 생성된다.</li>\n<li>설계 초반에는 적절한 책임과 협력의 큰 그림을 탐색하는 것이 중요한 목표다.</li>\n<li>애매하다면 단순하게 객체로 시작하고 반복적으로 책임과 협력을 정제해 가면서 필요한 순간에 객체로부터 역할을 분리해내는 것이 가장 좋은 방법이다.</li>\n<li>협력은 구체적인 객체가 아니라 추상적인 역할의 관점에서 설계하면 협력이 유연해지고 사용 가능해진다.</li>\n<li>역할의 가장 큰 장점은 설계의 구성 요소를 추상화할 수 있다는 것이다.</li>\n<li>\n<p>추상화를 이용한 설계가 가지는 두가지 장점</p>\n<ol>\n<li>추상화 계층만을 이용하면 중요한 정책을 상위 수준에서 단순화할 수 있다는 것이다.</li>\n<li>설계가 더 유연해 진다.</li>\n</ol>\n</li>\n<li>역할은 공통의 책임을 바탕으로 객체의 종류를 숨기기 때문에 이런 관점에서 역할을 객체의 추상화로 볼 수 있다. 추상화가 가지는 두 가지 장점은 협력의 관점에서 역할에도 동일하게 적용될 수 있다.</li>\n<li>협력 안에서 역할이라는 추상화를 이용하면 기존 코드를 수정하지 않고도 새로운 행동을 추가할 수 있다.</li>\n<li>역할은 모양이나 구조에 의해 정의될 수 없으며 오직 시스템 context 안에서 무엇을 하는지에 의해서만 정의될 수 있다.</li>\n<li>협력 관점에서 동일한 역할을 수행하는 객체들은 서로 대체 가능하다는 것을 의미한다.</li>\n<li>객체는 다양한 역할을 가질 수 있고, 여러 역할을 가질 수 있지만 특정한 협력 안에서는 일시적으로 오직 하나의 역할만이 보여진다는 점이다.</li>\n<li>특정한 협력 안에서 협력에 필요한 객체의 특정한 역할을 제외한 나머지 부분은 감춰진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>내일은 좀 쉬러간다.</li>\n<li>하지만 책은 읽을것이다.</li>\n<li>오브젝트 1, 2, 3장에서 설명하는 객체지향 설계를 하는 패턴을 훈련하는 방법을 정리해서 직접 해봐야겠다. 처음엔 1장에 나온 나쁜 코드를 다음엔 2장에 나온 요구사항을 갖고 훈련을 해봐야겠다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-04-26 TIL","date":"April 26, 2021"}}},"pageContext":{"slug":"/til/2021-04-26/","previous":{"fields":{"slug":"/study/결합도&응집도/"},"frontmatter":{"title":"2021-04-25 결합도와 응집도","category":"study"}},"next":{"fields":{"slug":"/study/하루3분 네트워크5/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 5","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}