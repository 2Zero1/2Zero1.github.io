{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-05-17/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"bbf5167e-3f3a-5408-8a38-e9c9b2de6a74","excerpt":"fact 오브젝트 7장 객체 분해를 읽고 정리했다. 엽서 프로젝트의 테스트코드를 리팩터링했다. 화상 면접을 보았다. 사색에 빠져 살짝 우울했다가 기분이 좋아졌다. feelings 오브젝트 7장을 읽으면서 개념이 상당히 어려웠다. 스터디 할때도 내가 어려워 했던 부분이다. 오브젝트…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>오브젝트 7장 객체 분해를 읽고 정리했다.</li>\n<li>엽서 프로젝트의 테스트코드를 리팩터링했다.</li>\n<li>화상 면접을 보았다.</li>\n<li>사색에 빠져 살짝 우울했다가 기분이 좋아졌다.</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>오브젝트 7장을 읽으면서 개념이 상당히 어려웠다. 스터디 할때도 내가 어려워 했던 부분이다.</li>\n<li>오브젝트 7장을 정리하면서 읽었던 것을 다시 머릿속에서 정리하는 시간을 가질 수 있어서 기분이 좋았다.</li>\n<li>테스트 코드를 리팩터링 하는데 테스트 코드가 어떤 의도로 작성했던건지 기억이 안났던게 있다.. 테스트 코드를 작성할때 실제로 앱에 대한 설명이 될 수 있을 정도로 이해하기 쉽게 작성하려고 노력해야겠다!</li>\n<li>이전 회사에서 커리어가 한 분야가 아니라 전체적인 부분을 모두 개발하다 보니, 이력서를 작성할때 애매해서 좀 그랬다… 하지만 난 수준 높은 엔지니어가 되기위해 가야할 방향과 방법을 배웠고, 일정을 관리하는 훈련을 했다. 나에게 필요한 것은 내가 성장하기 위한 시간과 더 효율적으로 성장하기 위한 방법을 강구하는것이다. 목표는 어딘지 알고있다.</li>\n<li>취업을 하기 위해선 보여줄게 있어야 한다는 것이다. 아쉽게도 내가 요즘 중요하게 공부하는 것들은 인사 담당자들에게 실제로 보여줄 수 있는 것들은 아니다. 실제로 내가 이후로 잡아놓은 것들도 개발을 더 잘하고 좋은 제품을 만들기 위한 것이지 잘 보여주기 위한것들은 아니다. 결국 내가 공부하는 것들도 숙달해서 보여줄게 있어야 한 단말이다. 내가 이전 회사에서 배우고 훈련한 값진것들이 면접관들에게 어필하기엔 추상적이고 아직 보여줄만한 단계까지 올라오지 않았다는것이 너무 아쉽다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>지금 내가 공부하는 오브젝트나 es6 관련된 지식들이 실제로 내가 취업에 필요한 것들은 아니다.. 물론 취업에 힘을 줘서 좋은 회사에 거는건 좋겠지만 미래 지향적으로 결국 계속해서 공부하고 익혀야할 지식들이다. 지금 당장 들어가서 제품 기능을 양산하는데 있어서 필요한건 아니지만, 제품을 만들기 위해 중요한 것들이다.</li>\n<li>추상화 방법으로 프로시저 추상화와 데이터 추상화가 있다.</li>\n<li>프로시저 추상화는 기능분해이며, 데이터 추상화에는 데이터를 중심으로 type을 추상화한 type abstraction과 데이터를 중심으로 프로시저를 추상화한 procedure abstraction이 있다. 전자를 abstract data type 후자를 object-oriented라고 한다.</li>\n<li>procedure abstraction은 기능 분해라고도 하며, 최상위 기능을 정의하고 더 작은 단계의 작업으로 분해하는 하향식 접근법이 있다.</li>\n<li>하향식 분해의 문제를 해결하기 위한 방법으로 정보 은닉을 이용한 모듈 분해가 있다.</li>\n<li>정보 은닉은 외부에 감춰야 하는 비밀에 따라 시스템을 분할하는 모듈 분할 원리다.</li>\n<li>모듈은 변경될 가능성이 있는 비밀을 내부로 감추고, 잘 정의되고 쉽게 변경되지 않을 퍼블릭 인터페이스를 외부에 제공해서 내부의 비밀에 함부로 접근하지 못하게 한다.</li>\n<li>모듈과 기능분해는 상호 배타적인 관계가 아니며, 시스템을 모듈로 분해한 후에 각 모듈 내부를 구현하기 위해 기능을 분해할 수 있다.</li>\n<li>기능 분해가 하나의 기능을 구현하기 위해 필요한 기능들을 순차적으로 찾아가는 탐색의 과정이라면 모듈 분해는 감춰야 하는 비밀을 선택하고 비밀 주변에 안정적인 보호막을 설치하는 보존의 과정이다.</li>\n<li>\n<p>모듈은 두가지 비밀을 감춘다.</p>\n<ol>\n<li>복잡성: 모듈이 너무 복잡한 경우 이해하고 사용하기 어렵다. 외부에 모듈을 추상화할 수 있는 간단한 인터페이스를 제공해서 모듈의 복잡도를 낮춘다.</li>\n<li>변경 가능성: 변경 가능한 설계 결정이 외부에 노출될 경우 실제로 변경이 발생했을 때 파급효과가 커진다. 변경 발생 시 하나의 모듈만 수정하면 되도록 변경 가능한 설계 결정을 모듈 내부로 감추고 외부에는 쉽게 변경되지 않을 인터페이스를 제공한다.</li>\n</ol>\n</li>\n<li>모듈이 정보 은닉이라는 개념을 통해 데이터라는 존재를 설계의 중심 요소로 부각시킨다. 모듈에 있어서 핵심은 데이터다. 데이터를 중심으로 시스템을 분해하는 것이다. 모듈은 데이터와 함수가 통합된 한 차원 높은 추상화를 제공하는 설계 단위다.</li>\n<li>모듈의 가장 큰 단점은 인스턴스의 개념을 제공하지 않는다는 점이다. 그래서 나온것이 추상 데이터 타입이다.</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>정렬 다 읽기</li>\n<li>es6 2,3,4 강의 보기</li>\n<li>es6 공부하기</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-05-18 TIL","date":"May 18, 2021"}}},"pageContext":{"slug":"/til/2021-05-17/","previous":{"fields":{"slug":"/til/2021-05-18/"},"frontmatter":{"title":"2021-05-17 TIL","category":"TIL"}},"next":{"fields":{"slug":"/study/오브젝트/7장 객체분해/"},"frontmatter":{"title":"오브젝트 7장","category":"OOP"}}}},"staticQueryHashes":["3128451518","96099027"]}