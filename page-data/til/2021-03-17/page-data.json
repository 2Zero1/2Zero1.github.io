{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-03-17/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"c7c8d880-2383-5273-8d52-83f712483f74","excerpt":"fact 7강을 강의를 다시 보앗다. 리액트 문서 main concepts 부분을 읽었다. 프로 자바스크립트 테크닉 40 ~ 60p 까지 읽었다. 프로젝트를 기획했다. 엽서 보내기이다. 전송할 수 있는 권한을 어떻게 줄것인지 생각해 보아야겠다. feelings 강의 듣기가 너무 지루해서 힘들다. 프로 자바스크립트 테크닉 책을 읽으면서 js…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>7강을 강의를 다시 보앗다.</li>\n<li>리액트 문서 main concepts 부분을 읽었다.</li>\n<li>프로 자바스크립트 테크닉 40 ~ 60p 까지 읽었다.</li>\n<li>\n<p>프로젝트를 기획했다. 엽서 보내기이다.</p>\n<ul>\n<li>전송할 수 있는 권한을 어떻게 줄것인지 생각해 보아야겠다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>강의 듣기가 너무 지루해서 힘들다.</li>\n<li>프로 자바스크립트 테크닉 책을 읽으면서 js의 진짜 동작 방식을 알게되었다.</li>\n<li>프로젝트를 기획하는데, 뭔가 재미있을것 같다. 하지만 디자인이 이뻐야할탠데 .. 디자인은 돈주고 맡겨야되나 .. ?</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>코드숨</p>\n<ul>\n<li>useEffect : 렌더 될때마다 인자로 들어간 함수가 실행되며, 두번째 인자인 배열에 들어간 변수가 변경됬는지 체크하여 변경되지 않았다면 첫번째 인자로 들어간 함수를 실행하지 않는다. 빈 배열이라면 맨 처음에만 한번 실행한다.</li>\n<li>useCallback : 리액트에서 컴포넌트를 memoization 할때 사용되며, 컴포넌트 내부에서 사용하는 함수가 매번 생성될때 똑같은 함수인데도 memo를 쓰지 않게 되는 현상을 방지하기 위해 사용됨. 두번째 인자인 배열에 들어간 변수들이 변경된것을 확인하여 그들이 변경될 경우에만 함수가 실행 되도록 할 수 있음.</li>\n<li>react-toolkit</li>\n<li>action, actionCreator, reducer 모두를 slice 한곳에서 해결하게 해준다.</li>\n<li>createSlice({initstate, name, reducers})순으로 사용된다.</li>\n<li>redux-thunk를 자동으로 내포하고 있다.</li>\n<li>virtualDom</li>\n<li>React는 실제 DOM 과 virtualDom을 사용한다.</li>\n<li>실제 DOM 보다 virtualDom이 diffing이 빠르다.</li>\n<li>실제 dom과 일치되는 virtualDom을 가지며 virtualDom이 update될때 이전 버전의 virtualDom과 비교하여 diffing을 하며 변경된 부분만 실제 dom에서 변경한다.</li>\n</ul>\n</li>\n<li>\n<p>프로 자바스크립트 테크닉</p>\n<ul>\n<li>상속</li>\n<li>js는 클래스는 문법적 설탕이고, Object.create로 확장하여 상속 계층을 만들 수 있다.</li>\n<li>부모 유형이라고 정하고 싶은 임의의 객체를 인자로 하여 Object.create를 호출하면, 반환된 값은 희망하는 자식 유형이다.</li>\n<li>isPrototypeOf는 어떤 객체에서도 호출될 수 있으며, 어떤 자바스크립트 객체에도 존재하는 함수이다. ((부모객체).isPrototypeOf(자식객체)) = boolean</li>\n<li>Object.getPrototypeOf()형식으로 호출시 현재 객체의 기반이 되는 유형의 참조값이 반환된다.</li>\n<li>\n<p>객체지향 시스템에선 보통 super로 불리는 접근자로 접근하지만, prototype 언어인 js는 super 함수가 없었다.</p>\n<ul>\n<li>\n<p>세가지 방법</p>\n<ul>\n<li>super를 다시 구현하면 된다. 하지만, 비효율적이라고 추천하진 않음.</li>\n<li>\n<p>부모의 방법을 명시적으로 호출</p>\n<ul>\n<li>부모객체.메서드.call(this) ex) Person.toString.call(this);</li>\n<li>이런식의 접근은 객체가 부모 객체와 연결되어 있을때만 가능하다.</li>\n</ul>\n</li>\n<li>super가 있는 지 신경을 쓰지 않는다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>가시성</p>\n<ul>\n<li>js는 함수든 속성이든 대부분 공개된다.</li>\n<li>하지만 privileged function을 사용하여 가시성을 제어할 수 있다.</li>\n<li>js는 전역 범위와 함수 범위가 있고, 클로저를 사용한다.</li>\n<li>밑의 extend에 creationTime 속성은 수정할 수 없지만, getCreationTime 함수를 통해 얻을 순 있다.</li>\n<li>creationTie은 함수 extend의 지역 변수고, 함수 바깥에서 사용될 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>이름공간(namespace)</p>\n<ul>\n<li>코드를 재사용하고 재분배할뿐만 아니라, 적절히 감싸는 일련의 도구와 전역 맥락을 우발적으로 쓰지 않도록 해줌</li>\n<li>우리는 전역 매갉에 속하지 않은 함수, 변수, 객체, 유형 등을 별개의 맥락으로 감싸려고 하고 namespace를 이용할것임</li>\n<li>이름 공간은 변수와 함수의 맥락을 제공함.</li>\n<li>\n<p>방법</p>\n<ol>\n<li>객체를 써서 전역 맥락으로 부터 감추고자 하는 코드를 감싼다. p52</li>\n<li>\n<p>모듈 패턴(module pattern)을 쓴다.</p>\n<ul>\n<li>이름 공간 코드를 함수로 감싸 모듈로 만든다. p53</li>\n<li>이 패턴의 장점은 이름 공간에만 개별형인 자료를 설정할 때 클로저를 다시 한번 활용할 수 있다는 점이다. p54</li>\n</ul>\n</li>\n<li>\n<p>함수 표현식(IIFE, immediately invoked function expression)</p>\n<ul>\n<li>이전까진 function declarations을 썼지만,function expression을 쓴다.</li>\n<li>괄호 안에는 함수를 정의한 부분을 넣을 수 있고, 구문 해석기에 명령이 아닌 표현식이라는 힌트를 주는 셈이다.</li>\n<li>괄호는 명령을 포함할 수 없고, 다만 표현식으로 평가받을 수 있는 코드만 담을 수 있다.</li>\n<li>객체를 만들어 반환하는 대신 객체를 직접 반환하며, 결정적으로 사용하지 않는 객체를 위해 예약하는 공간을 없애 코드를 단순화했다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>요약</p>\n<ul>\n<li>\n<p>목표 : 코드관리</p>\n<ul>\n<li>\n<p>훌륭한 객체지향 가이드라인을 따르는 코드를 작성</p>\n<ul>\n<li>자바스크립트 prototype이 갖는 본질을 이용하여 객체지향의 클래스나 인스턴스와 같은 것들을 자바스크립트 고유의 기능으로 구현</li>\n</ul>\n</li>\n<li>\n<p>그런 코드를 재사용하기 위해선 어떻게 감싸야 하는지</p>\n<ul>\n<li>namespace와 모듈 및 즉시 호출되는 함수 표현식과 같이 코드를 감쌀 수 있게 하였음.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>궁극적으로 위의 방법들을 모두 사용해야 전역 맥락을 거의 쓰지 않을 수 있음. 하지만 요즘엔 const가 나왔지</li>\n</ul>\n</li>\n<li>객체 안에서 key값으로 함수를 정의하고 내부 멤버 속성에 접근하면 undefined가 뜰까 ?</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">var</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Con'</span><span class=\"token punctuation\">,</span>\n    birthDate<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-10-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getAge</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> diff <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthDate<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> year <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span> <span class=\"token operator\">*</span> <span class=\"token number\">365.25</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">+</span> <span class=\"token string\">' is a '</span>  <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token string\">' year-old '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">extend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          tmp<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">var</span> creationTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getCreationTime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> creationTime<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      tmp<span class=\"token punctuation\">.</span>getCreationTime <span class=\"token operator\">=</span> getCreationTime<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">var</span> Teacher <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    job<span class=\"token operator\">:</span> <span class=\"token string\">'teacher'</span><span class=\"token punctuation\">,</span>\n    subject<span class=\"token operator\">:</span> <span class=\"token string\">'English Literature'</span><span class=\"token punctuation\">,</span>\n    yearsExp<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> original <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> original <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">+</span> <span class=\"token string\">' teacher'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> patty <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Patrica'</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token string\">'ho'</span><span class=\"token punctuation\">,</span>\n    subject<span class=\"token operator\">:</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span>\n    yearExp<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token operator\">:</span> <span class=\"token string\">'fem'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  patty<span class=\"token punctuation\">.</span><span class=\"token function\">getCreationTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>오늘은 가슴 운동을 했다. 내일 운동은 하체다. 진짜로</li>\n<li>프로젝트 기획서를 만들고 스펙 문서를 작성해야겠다.</li>\n<li>리액트 문서를 전체적으로 봐야겠다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-03-17 TIL","date":"March 17, 2021"}}},"pageContext":{"slug":"/til/2021-03-17/","previous":{"fields":{"slug":"/til/2021-03-16/"},"frontmatter":{"title":"2021-03-16 TIL","category":"TIL"}},"next":{"fields":{"slug":"/study/하루3분 네트워크5/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 5","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}