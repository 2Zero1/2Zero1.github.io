{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f2b1596b-242b-5106-83c3-fd1c2ad562d3","excerpt":"예외, 단정, 로깅 예외 처리 (exception handling…","html":"<h2 id=\"예외-단정-로깅\"><a href=\"#%EC%98%88%EC%99%B8-%EB%8B%A8%EC%A0%95-%EB%A1%9C%EA%B9%85\" aria-label=\"예외 단정 로깅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외, 단정, 로깅</h2>\n<h3 id=\"예외-처리\"><a href=\"#%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"예외 처리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 처리</h3>\n<p>(exception handling)을 지원하므로 메서드에서 예외를 던질 수 있다. 연이은 호출 과정에 있는 메서드 중 하나(직접 호출한 쪽일 필요는 없다.)는 해당 예외를 잡아서 처리할 책임이 있다. 예외 처리는 오류를 감지하는 과정과 처리하는 과정을 분리할 수 있다는 장점이 있다.</p>\n<h4 id=\"예외-던지기\"><a href=\"#%EC%98%88%EC%99%B8-%EB%8D%98%EC%A7%80%EA%B8%B0\" aria-label=\"예외 던지기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 던지기</h4>\n<p>필요한 리소스가 없거나 부적합한 매개변수를 받아 메서드가 해야 할 일을 할 수 없는 상황이라면 예외를 던지는 것이 최선이다.</p>\n<p>두 경계값 사이에 있는 임의의 정수를 돌려주는 메서드에서 (10, 5)로 호출하여 문제가 생길 경우 예외를 던지는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">randInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">></span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n            String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"low should be &lt;= high but low is %d and high is %d\"</span><span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> low <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>throw 문으로 예외 클래스의 객체를 던지고 있으며, 디버깅 메시지를 생성 인수로 전달해 예외 객체를 생성했다. throw 문이 실행되면 정상적인 실행 흐름이 즉시 중단되고, 제어는 예외 핸들러로 전달된다.</p>\n<h4 id=\"예외-계층\"><a href=\"#%EC%98%88%EC%99%B8-%EA%B3%84%EC%B8%B5\" aria-label=\"예외 계층 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 계층</h4>\n<p>모든 예외는 Throwable 클래스의 서브클래스다. Error의 서브클래스는 예외 상황이 일어날 때 던지는 예외다. 예를 들어 메모리 고갈처럼 프로그램에서 처리할 수 없는 상황일 때 던진다. 이런 상황에선 프로그램이 할 수 있는 일은 사용자에게 뭔가 크게 잘못되었다는 메시지를 보여 주는 것 말고는 없다.</p>\n<p>프로그래머가 보고하는 예외는 Exception 클래스의 서브 클래스이다. Exception 클래스에는 두가지 서브클래스가 존재한다.</p>\n<ol>\n<li>\n<p>비검사 예외(unchecked exception)</p>\n<ul>\n<li>비검사 예외 RuntimeException의 서브클래스다. RuntimeException의 서브 클래스로 만든 예외는 컴파일 과정에서 검사를 받지 않는다.</li>\n<li>실패를 예상하는 상황에서 사용된다. 예를 들어 입출력에 사용하는 파일이 손상되거나 문제가 생기면 많은 예외 클래스가 IOException을 확장하므로 상황에 적잡한 클래스를 사용해 오류를 보고한다.</li>\n</ul>\n</li>\n<li>\n<p>다른 예외는 모두 검사 예외(checked exception)이다.</p>\n<ul>\n<li>검사를 한다는 의미는 컴파일 시간에 검사를 한다는 말이다. 그러므로 catch 이던 메서드 헤더에 exception signiture로 예외를 선언해야한다.</li>\n<li>한 예로 NullPointerException가 있다. 거의 모든 메서드가 이 예외를 던지니 잡을 노력할 필요없다.</li>\n</ul>\n</li>\n</ol>\n<p>구현자가 검사 예외를 던질지, 비검사 예외를 던질지 결정해야 할 때도 있다. Integer.parseInteger(str)은 str이 유효한 정수를 담고 있지 않으면 비검사 예외인 NumberFormatException을 던진다. 그 이유는 Integer.parseInt를 호출하기 전에는 문자열이 유효한 정수인지 검사할 수 있기 때문이다.\n또 Class.forName(str)은 str이 유효한 클래스 이름을 담고 있지 않으면 검사 예외인 ClassNotFoundException을 던진다. 실제로 클래스를 로드하기 전에는 그 클래스를 로드할 수 있는지 알 수 없기 때문이다.</p>\n<p>자바 API에는 많은 예외 클래스가 있지만, 목적에 맞는 표준 예외 클래스가 없다면 Exception 이나 RuntimeException, 기타 기존 예외 클래스를 확장해서 직접 만들어야 한다.\n예외 클래스를 직접 만들 경우 인수 없는 생성자와 메시지 문자열을 받는 생성자를 구현하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileFormatException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FileFormatException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FileFormatException</span><span class=\"token punctuation\">(</span>String message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"검사-예외-선언\"><a href=\"#%EA%B2%80%EC%82%AC-%EC%98%88%EC%99%B8-%EC%84%A0%EC%96%B8\" aria-label=\"검사 예외 선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검사 예외 선언</h4>\n<p>검사 예외를 일으킬 수 있는 메서드는 메서드 헤더의 throws 절에 해당 예외를 선언해야 한다.\n메서드에서 throw 문을 사용하기 위해서든, throws 절이 있는 또 다른 메서드를 호출하기 위해서든 해당 메서드가 던질 수 있는 예외를 모두 나열해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">,</span> String filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> ReflectiveOperationException</code></pre></div>\n<p>throws 절에서 예외를 공통 슈퍼클래스로 묶을 수 있다. 공통 슈퍼클래스로 묶는 방벙비 좋은지 나쁜지는 던질 예외에 따라 다르다.</p>\n<ol>\n<li>메서드에서 IOException의 여러 클래스를 던질 수 있으면 throws IOException 절로 묶어도 괜찬다.</li>\n<li>하지만 관련 없는 예외를 던질 때는 throws Exception 절로 묶지 말아야한다.(예외 검사의 목적을 잃을 수도 있기 때문이다)</li>\n</ol>\n<p>메서드를 오버라이드 할 때 슈퍼클래스 메서드에서 선언한 예외보다 광범위한 검사 예외는 던질 수 없다.(잘 이해가 안됨)\n예를 들어 앞에서 나온 write 메서드를 오버라이드 한다고 하자. 그러면 다음과 같이 오버라이드하는 메서드에서 그보다 범위가 좁은 예외만 던질 수 있다. 하지만 관련 없는(관련 없는 기준이 대체 뭐임?) 검사 예외를 던지려고 하면 컴파일에 실패한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">,</span> String filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> FileNotFoundException</code></pre></div>\n<p>메서드에서 검사 예외나 비검사 예외를 던진다면 자바독의 @throws 태그로 문서화 할 수 있다. 프로그래머 대부분은 문서화할 만한 내용이 있을 때만 이 태그로 문서화 한다.</p>\n<p>람다 표현식의 예외 타입은 절대로 명시하지 않는다. 하지만 람다 표현식ㅇ서 검사 예외를 던질 수 있다면 그 예외를 선언한 함수형 인터페이스에만 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"output.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//이 코드는 컴파일 에러가 난다.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//accept 메서드는 어떤 검사 예외도 던지지 않도록 선언되어 있다.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"예외-잡기\"><a href=\"#%EC%98%88%EC%99%B8-%EC%9E%A1%EA%B8%B0\" aria-label=\"예외 잡기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 잡기</h4>\n<p>예외를 잡기 위해 try 블록을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionClass ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    handler\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>try 블록에 들어있는 문장(statement)을 실행하다가 주어진 예외 클래스(ExceptionClass)의 예외가 나면 제어 핸들러(handler)로 이동한다. 예외 변수(이 예제에서는 ex)는 예외 객체를 참조하며, 핸들러는 필요하면 해당 예외 객체를 조사할 수 있다.</p>\n<p>위의 기본 구조는 두가지로 변경이 가능하다.</p>\n<p>서로 다른 예외 클래스에 대응하는 핸들러를 여러개 두는방법\n- 위에 있는 예외 클래스 부터 일치하는 예외 타입을 찾고, 없으면 아래로 간다.\n- 이런 구조에서는 가장 상세한 예외 클래스부터 배치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionClass1 ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    handler1\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionClass2 ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    handler2\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionClass3 ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    handler3\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하나의 catch에 여러개의 예외 클래스를 두는 방법\n- 핸들러는 나열된 예외 클래스에 공통으로 있는 메서드만 예외 변수 ex로 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionClass1 ex1<span class=\"token operator\">|</span>ExceptionClass2 ex2<span class=\"token operator\">|</span>ExceptionClass3 ex3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    handler\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"try-with-resources-문\"><a href=\"#try-with-resources-%EB%AC%B8\" aria-label=\"try with resources 문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources 문</h4>\n<p>밑의 코드는 리소스에 접근하여 파일에 쓰기를 수행하고 완료하면 파일을 닫는 코드이다. 하지만 어떤 메서드든 예외를 던지면 out.close()가 호출되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ArrayList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\nPrintWriter out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>String line<span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드는 특별한 try 문으로 해결할 수 있다. 리소스는 반드시 AutoCloseable(close 메서드 하나만 선언되어져 있다.) 인터페이스를 구현하는 클래스에 속해야한다. 예외를 잡는 catch 절을 붙히는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ArrayList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>PrintWriter out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>String line<span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는 이전에 선언된 사실상 최종 변수를 헤더에 넣어도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">PrintWriter out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>String line<span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정상적으로 try 블록의 끝에 이르렀든 예외가 일어났든 간에 try 블록이 끝날 때 리소스 객체의 close 메서드가 호출된다.</p>\n<p>여러 리소스를 세미콜콘으로 구분해 선언할 수 있다. 밑의 코드에서 리소스는 초기화 순서의 역순으로 닫는다. 즉 out.close()가 in.close()보다 먼저 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>Scanner in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>Paths<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sr/share/dic/words\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPrintWriter out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">hashNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>PrinterWriter 생성자에서 예외를 던지면, 이 시점에 in은 이미 초기화 되었지만 out은 그렇지 않다. try 문은 이상황을 in.close()를 호출하고 예외를 전파하여 처리한다.</p>\n<p>일부 close 메서드는 예외를 던질 수 있는데, try 블록이 정상적으로 끝난 후 이런 메서드에서 예외가 일어나면 호출하는 쪽으로 해당 예외를 던진다. 하지만 또 다른 예외가 일어나서 리소스들의 close 메서드가 호출되고, 그중 하나가 예외를 던지면 그 예외는 원래 일어난 예외보다 덜 중요하기 마련이다. 이런 상황에선 원래 일어난 예외를 다시 던지고, close 호출로 일어난 예외를 잡아서 억누른 예외(suppressed)로 첨부한다. 주 예외(primary exception)를 잡을 때 getSuppressed 메서드를 호출하면 부 예외(secondary exception)를 추출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Throwable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> secondaryException <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getSuppressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"finally절\"><a href=\"#finally%EC%A0%88\" aria-label=\"finally절 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>finally절</h4>\n<p>가끔은 AutoCloseable이 아닌 무언가를 정리해야 할 때도 있다. 이대는 finally 절을 사용한다.\nfinally 절은 정상으로든 예외가 일어다서든 try 블록이 끝날 때 실행된다.\n이런 패턴은 잠금을 획득 해제 하거나 카운터를 증가 감소 시킬 때, 스택에 무언가를 넣었다가 작업을 마치고 꺼낼 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    작업수행\n<span class=\"token punctuation\">}</span>\n``` <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    정리 작업\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>finally 절에서는 예외를 던지지 말아야한다. try 블록 바디가 예외로 종료되더라도 finally 절에서 일어난 예외로 가려지기 때문이다.</p>\n<p>finally 절에 return 문을 작성하면 안된다. try 블록 바디에 return 문이 있어도 finally 절에 있는 return 문이 반환 값을 교체해버린다.</p>\n<p>catch 절 뒤에 finally 절을 붙여서 try 문을 구성할 수도 있지만 finally 절에서 in.close()같은 예외를 던지는 코드를 두는 실수를 조심해야한다. 그렇기 때문에 밑의 코드와 같이 try/catch/finally 문을 try-with-resources 문이나 try/catch 문 안에 try/finally를 중첩하는 방법으로 다시 작성하는게 낫다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">        BufferedReader in <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                in <span class=\"token operator\">=</span> Files<span class=\"token punctuation\">.</span><span class=\"token function\">newBufferedReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> StandardCharsets<span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caught IOException: \"</span><span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"예외-다시-던지기와-예외-연쇄\"><a href=\"#%EC%98%88%EC%99%B8-%EB%8B%A4%EC%8B%9C-%EB%8D%98%EC%A7%80%EA%B8%B0%EC%99%80-%EC%98%88%EC%99%B8-%EC%97%B0%EC%87%84\" aria-label=\"예외 다시 던지기와 예외 연쇄 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 다시 던지기와 예외 연쇄</h4>\n<p>예외가 일어날 때 무슨 일을 해야 할지 모르더라도 실패를 로그로 기록하고 싶다면 예외를 다시 던져 적합한 예외 핸들러가 다룰 수 있도록 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    작업을 수행한다<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래의 코드는 catch 문에서 Exception 클래스 예외를 잡고 있어서 메서드 예외를 Exception으로 변경해야 할것 같지만, 자바 컴파일러는 실행 흐름을 주의깊게 추적하여 ex가 임의의 Exception이 아니라 try 블록 안에 있는 문장에서 던지는 예외라는 사실을 알아낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>String filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    작업을 수행한다<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서브시스템의 실패를 서브시스템 사용자에게 의미 있는 예외클래스로 보고하고 싶을 때 또는 서블릿 실행중 DB 오류가 일어나 서블릿은 무엇이 잘못되었는지 자세히 알고 싶지 않지만, 서블릿에 문제가 있다는 것은 확실히 알고 싶을 것이다. 이 처럼 던져진 예외의 클래스를 변경하고 싶은 경우 원본 예외를 잡아서 상위 수준 예외로 연쇄해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    DB에 접근\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database error\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ServletException을 잡을 때 예외의 원본을 추출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Throwable cause <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ServletException 클래스에는 예외의 원인을 매개변수로 받는 생성자가 있다. 물론 모든 클래스에 있는건 아니다. 이럴땐 initCause 메서드를 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    DB에 접근\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Throwable ex2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CruftyOldException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ex2<span class=\"token punctuation\">.</span><span class=\"token function\">initCause</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> ex2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그렇기 때문에 예외 클래스를 직접 작성하면 다음 생성자도 추가로 작성해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileFormatException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FileFormatException</span><span class=\"token punctuation\">(</span>Throwable cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">initCause</span><span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FIleFormatException</span><span class=\"token punctuation\">(</span>String message<span class=\"token punctuation\">,</span> Throwable cause<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예외 연쇄 기법은 검사 예외를 허용하지 않는 메서드에서 검사 예외가 일어날 때도 유용하다. 해당 검사 예외를 잡아 비검사 예외에 연쇄하면 된다.(이게 무슨말인지 모르겠다.)</p>\n<h4 id=\"미처리-예외와-스택-추적\"><a href=\"#%EB%AF%B8%EC%B2%98%EB%A6%AC-%EC%98%88%EC%99%B8%EC%99%80-%EC%8A%A4%ED%83%9D-%EC%B6%94%EC%A0%81\" aria-label=\"미처리 예외와 스택 추적 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미처리 예외와 스택 추적</h4>\n<p>예외를 어디에서도 잡지 않으면 스택 추적(stack trace)이 표시된다. 스택 추적은 오류 메시지용 스트림인 System.err로 전달된다.</p>\n<p>기술 지원 스태프의 조사용 등으로 예외를 다른 곳에 저장하고 싶다면 기본 미처리 예외 핸들러(uncaught exception)를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultUncaughtExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    예외를 기록한다<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>미처리 예외는 해당 예외가 일어난 스레드를 종료한다. 지금까지 살펴본 프로그램처럼 어플리케이션에 스레드가 한개만 있다면, 프로그램은 미처리 예외 핸들러를 호출한 후 종료한다.</p>\n<p>예외를 잡아야 하는데 무엇을 할지 모르겠다면 스택 추적이라도 출력해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cl <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ClassNotFoundException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예외의 스택 추적 내용을 저장하고 싶을 땐 문자열에 집어넣으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ByteArrayOutputStream out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString description <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"objectsrequirenonnull-메서드\"><a href=\"#objectsrequirenonnull-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"objectsrequirenonnull 메서드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objects.requireNonNull 메서드</h4>\n<p>Objects 클래스에는 편리한 매개변수 null 검사용 메서드가 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>requireNonNull 호출을 문제의 원인으로 보면 무엇을 실수 했는지 바로 알 수 있고, 또 예외에 대응하는 메시지 문자열도 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">,</span> <span class=\"token string\">\"direction must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>변형을 사용하면 예외를 던지지 않고 대체 값을 전달할 수 있다. 메시지 에는 람다를 넣을 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNullElse</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">,</span> <span class=\"token string\">\"North\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"코어자바 5장","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/study/코어자바 5장/","previous":{"fields":{"slug":"/study/하루3분 네트워크4/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 4","category":"study"}},"next":{"fields":{"slug":"/study/그림으로배우는네트워크3/"},"frontmatter":{"title":"그림으로 배우는 네트워크 스터디 3","category":"study"}}}}