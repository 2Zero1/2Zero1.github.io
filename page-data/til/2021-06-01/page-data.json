{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-06-01/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5e449bb3-cbbd-5a99-b6ff-8a11b59e7d74","excerpt":"fact DB 샤딩에 대해 공부하였음. RDBMS와 nosql의 차이를 찾아 보았음.. 샤딩이나 이것들이나 공부했었는데 너무 오래되서 기억이 가물가물하다.. 넥스트 스텝 1강 진행 오브젝트 2장 읽기 feelings 꾸준히 공부해야한다. 내가 잘 모르는 것들은 결국 내가 공부하면 정복할 수 있다고 느꼈다. 꾸준한 훈련도 해야한다. 결국 개발자는 코드로 보여줘야한다. 좋은 코드를 작성하기 위해선 많이 짜고 많이 훈련해야된다고 느꼈다. finding 샤딩 종류 vertical sharding…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>DB 샤딩에 대해 공부하였음.</li>\n<li>RDBMS와 nosql의 차이를 찾아 보았음.. 샤딩이나 이것들이나 공부했었는데 너무 오래되서 기억이 가물가물하다..</li>\n<li>넥스트 스텝 1강 진행</li>\n<li>오브젝트 2장 읽기</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>꾸준히 공부해야한다. 내가 잘 모르는 것들은 결국 내가 공부하면 정복할 수 있다고 느꼈다.</li>\n<li>꾸준한 훈련도 해야한다. 결국 개발자는 코드로 보여줘야한다. 좋은 코드를 작성하기 위해선 많이 짜고 많이 훈련해야된다고 느꼈다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>샤딩 종류</p>\n<ol>\n<li>\n<p>vertical sharding</p>\n<ul>\n<li>테이블 별로 분할한다.</li>\n<li>사용자 프로필 정보용 서버, 사용자 친구 리스트용 서버, 사용자가 만든 컨텐츠용 서버등으로 분할하는 방식</li>\n<li>구현이 간단하고, 전체 시스템에 큰 변화가 없지만 각 DB서버에 있는 테이블에 있는 데이터가 점점 거대해지면 추가 샤딩해야함.</li>\n</ul>\n</li>\n<li>\n<p>range based sharding</p>\n<ul>\n<li>하나의 테이블이 거대해지는 경우 서버를 분리하는 방식</li>\n<li>데이터를 분할하는 방법이 예측 가능해야하는 주의사항이 있음.</li>\n</ul>\n</li>\n<li>\n<p>key(hash) based sharding</p>\n<ul>\n<li>해쉬 결과가 데이터가 균등하게 분포되도록 해쉬함수를 정해야함.</li>\n<li>서버의 수를 늘리기 위해 해쉬 함수를 변경해야 하고, 데이터를 변경된 해쉬함수에 맞게 데이터를 옮겨줘야함.</li>\n</ul>\n</li>\n<li>\n<p>directory based partioning</p>\n<ul>\n<li>파티셔닝 메커니즘을 제공하는 추상화된 서비스를 만드는 것. 샤드키를 look-up할 수 있으면 되므로, 구현은 DB와 cach를 적절히 조합해만들 수 있다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>RDBMS와 nosql의 차이</p>\n<ol>\n<li>\n<p>RDBMS</p>\n<ul>\n<li>데이터를 속성과 값을 가진 테이블들이 서로 관계를 갖도록 관리한다.</li>\n<li>sql를 사용한다.</li>\n<li>데이터의 분류, 정렬, 탐색 속도가 비교적 빠르다.</li>\n<li>작업의 완전성을 보장한다.</li>\n<li>데이터의 update가 비교적 빠르다.</li>\n</ul>\n</li>\n<li>\n<p>NOSQL</p>\n<ul>\n<li>RDBMS로는 관리할 수 없는 복잡하고 용량이 큰 데이터들을 관리할 목적으로 등장</li>\n<li>테이블 간의 관계를 정의하지 않으며, key value 입출력을 수행할 수 있다.</li>\n<li>NoSQL은 빅데이터의 등장으로 인해 데이터와 트래픽이 기하급수적으로 증가함에 따라 RDBMS에 단점인 성능을 향상시키기 위해서는 장비가 좋아야 하는 Scale-Up의 특징이 비용을 기하급수적으로 증가시키기 때문에 데이터 일관성은 포기하되 비용을 고려하여 여러 대의 데이터에 분산하여 저장하는 Scale-Out을 목표로 등장</li>\n<li>데이터 중복이 발생할 수 있으며 변경될 경우 모든 컬렉션에서 수정을 해야한다.</li>\n<li>많은 양의 데이터를 저장할 수 있다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>위에서 내가 부족했던것과 못했던 부분들을 추가적으로 적용해야겠다.</li>\n<li>테스트 프레임워크 문서를 더 읽고 사용법을 이해해야겠다.</li>\n<li>병렬 프로그래밍 공부좀 해야겠다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-05-31 TIL","date":"May 31, 2021"}}},"pageContext":{"slug":"/til/2021-06-01/","previous":{"fields":{"slug":"/til/2021-05-30/"},"frontmatter":{"title":"2021-05-30 TIL","category":"TIL"}},"next":{"fields":{"slug":"/til/2021-05-31/"},"frontmatter":{"title":"2021-06-01 TIL","category":"TIL"}}}},"staticQueryHashes":["3128451518","96099027"]}