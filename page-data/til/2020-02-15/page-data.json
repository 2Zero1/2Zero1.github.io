{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2020-02-15/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7e9be2db-98c1-5c8e-a52a-e6b80a2eeb03","excerpt":"할 일 목록 코틀린 코루틴 부분까지 정리 녹취록 남길 수 있는곳 까지 남기기 알고리즘 문제 한문제 풀기 완료하지 못한 목록 완료 목록 5Fs 1. Fact 1. 네트워크 2. 코틀린 스터디 코틀린의 델리게이트 class delegate 앞에서 다루었던 property delegate와는 완전 다른 기법이다. 밑의 코드는 class delegate를 사용한다. 클래스에서 by의 위치는 상속받거나 implementation 하는 위치 다음에 by가 나온다. by 뒤에 나오는 person은 class…","html":"<h2 id=\"할-일-목록\" style=\"position:relative;\"><a href=\"#%ED%95%A0-%EC%9D%BC-%EB%AA%A9%EB%A1%9D\" aria-label=\"할 일 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>할 일 목록</h2>\n<ul>\n<li>코틀린 코루틴 부분까지 정리</li>\n<li>녹취록 남길 수 있는곳 까지 남기기</li>\n<li>알고리즘 문제 한문제 풀기</li>\n</ul>\n<h2 id=\"완료하지-못한-목록\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EB%AA%A9%EB%A1%9D\" aria-label=\"완료하지 못한 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료하지 못한 목록</h2>\n<h2 id=\"완료-목록\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C-%EB%AA%A9%EB%A1%9D\" aria-label=\"완료 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료 목록</h2>\n<h2 id=\"5fs\" style=\"position:relative;\"><a href=\"#5fs\" aria-label=\"5fs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5Fs</h2>\n<h3 id=\"1-fact\" style=\"position:relative;\"><a href=\"#1-fact\" aria-label=\"1 fact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Fact</h3>\n<h4 id=\"1-네트워크\" style=\"position:relative;\"><a href=\"#1-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\" aria-label=\"1 네트워크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 네트워크</h4>\n<h4 id=\"2-코틀린-스터디\" style=\"position:relative;\"><a href=\"#2-%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%8A%A4%ED%84%B0%EB%94%94\" aria-label=\"2 코틀린 스터디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 코틀린 스터디</h4>\n<ul>\n<li>\n<p>코틀린의 델리게이트</p>\n<ol>\n<li>\n<p>class delegate</p>\n<ul>\n<li>앞에서 다루었던 property delegate와는 완전 다른 기법이다.</li>\n<li>밑의 코드는 class delegate를 사용한다.</li>\n<li>클래스에서 by의 위치는 상속받거나 implementation 하는 위치 다음에 by가 나온다.</li>\n<li>by 뒤에 나오는 person은 class나 interface가 아니라 인스턴스(객체)가 나온다.</li>\n<li>그러면 Person이라는 인터페이스의 구현을 by 뒤의 인스턴스에게 위임을 한것임.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p>밑의 코드는 인자값으로 person으로 받아 Person 인터페이스 구현을 인자로 person 한태 처리하기로 한것 우리는 여기에 overide printName을 하지 않았음. 유저클래스에 보면 person을 상속했는데도 불구하고 overide printName을 안했음. 인터페이스는 상속한 곳에서 구현을 해야되는데 .안했다는 의미는 person 인스턴스의 person의 printName이 User의 printName을 대체했음.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">PersonImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> person<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Person <span class=\"token keyword\">by</span> person\n\n    <span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">PersonImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mario Arias\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 위임했는데도 불구하고 override를 한다면 위임한 person의 PrintName이 아닌 User가 구현한 printName을 사용할 것임. 밑의 코드 참고</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">PersonImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> person<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Person <span class=\"token keyword\">by</span> person <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Printing Name:\"</span><span class=\"token punctuation\">)</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>밑의 코드와 같이 생성자에 속성으로 만들기 위해 val을 붙히는 것 말고도 생성자의 인자값(val이나 var을 제거)하고 들어와도 person은 by뒤에 붙힐 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User2</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token keyword\">by</span> person</code></pre></div>\n<p>밑의 코드와 같이 인자값을 받아 인자값을 사용하여 인터페이스를 구현해서 그 클래스에 위임하는 클래스를 만들 수 있다. 밑의 패턴이 굉장히 많이 쓰인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User5</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token keyword\">by</span> <span class=\"token keyword\">object</span><span class=\"token operator\">:</span>Person <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"인자값을 받아 오브젝트 표현식으로 객체를 새로 만들기 받은 파라미터 : <span class=\"token interpolation variable\">$v</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>한 클래스에 여러개의 인터페이스를 상속하고 위임할 경우 각각 by를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User6</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span>Person<span class=\"token punctuation\">,</span> people<span class=\"token operator\">:</span>People<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token keyword\">by</span> person<span class=\"token punctuation\">,</span> People <span class=\"token keyword\">by</span> people\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> people <span class=\"token operator\">=</span> <span class=\"token function\">PeopleImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이태원 코딩도장 사람들\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> person3 <span class=\"token operator\">=</span> <span class=\"token function\">PersonImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오야지\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> user6 <span class=\"token operator\">=</span> <span class=\"token function\">User6</span><span class=\"token punctuation\">(</span>person3<span class=\"token punctuation\">,</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    user6<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    user6<span class=\"token punctuation\">.</span><span class=\"token function\">peopleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2feelings\" style=\"position:relative;\"><a href=\"#2feelings\" aria-label=\"2feelings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.Feelings</h3>\n<ul>\n<li>오늘 제너레이터와 코틀린의 델리게이션 부분을 다시 복습했는데 이론으로 그냥 코드보면서 공부하다가 직접 쳐보니까 확실히 다르다고 느꼈다.</li>\n<li>책의 내용을 뜯어보면서 읽어보니까 이전에 보지 못했던 부분도 이해할 수 있는것 같다.</li>\n</ul>\n<h3 id=\"3findings\" style=\"position:relative;\"><a href=\"#3findings\" aria-label=\"3findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.Findings</h3>\n<ul>\n<li>javascript에서 generator 에서 yield를 붙히는 바로 뒤의 변수가 다음 value로 넘어간다. generator.next()는 객체를 리턴하며 그안에 제너레이터가 완료됬는지 알려주는 done 변수와 yield뒤에 있던 값이 value로 존재한다.</li>\n<li>kotlin 에서 delegate는 다양하게 사용될 수 있다.</li>\n<li>kotlin의 delegate는 property와 class delegate가 존재한다.</li>\n<li>객체에 operator로 getValue() setValue()를 정의하면 delegate 객체가 된다.</li>\n<li>class delegate는 클래스 정의할 때 상속할 인터페이스나 클래스의 뒤에 by를 이용하여 delegate해준다.</li>\n</ul>\n<h3 id=\"4future-action-plan\" style=\"position:relative;\"><a href=\"#4future-action-plan\" aria-label=\"4future action plan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.Future Action Plan</h3>\n<ul>\n<li>http 책을 읽기 시작했는데 자주 보는 내용이 계속해서 생각이 나는데 시험문제를 만들어서 풀어보고 인출하는 연습을 해야겠다.</li>\n</ul>\n<h3 id=\"5feedback\" style=\"position:relative;\"><a href=\"#5feedback\" aria-label=\"5feedback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.FeedBack</h3>","frontmatter":{"title":"2020-02-15 TIL","date":"February 15, 2020"}}},"pageContext":{"slug":"/til/2020-02-15/","previous":{"fields":{"slug":"/til/2020-02-14/"},"frontmatter":{"title":"2020-02-14 TIL","category":"TIL"}},"next":{"fields":{"slug":"/til/2020-02-16/"},"frontmatter":{"title":"2020-02-16 TIL","category":"TIL"}}}},"staticQueryHashes":["3128451518","96099027"]}