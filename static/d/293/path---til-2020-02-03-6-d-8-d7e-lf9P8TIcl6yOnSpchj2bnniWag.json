{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"bd12b458-2a07-5822-aec9-3b3636428e60","excerpt":"5Fs 1. Fact 1. 네트워크 2. 코틀린 2.Feelings 네트워크 재미있었다. 코딩을 할 시간이 없다.. 코틀린 너무 어렵다.. 3.Findings 넷마스크가 IP의 네트워크 부를 알고 싶을 때는 넷마스크를 이용한다는 것을 알게 되었다. 코틀린에서 비동기 방식을 위한 여러가지 방식이 있는것을 알게 되었다. 콜백 퓨처 프로미스 코루틴 4.Future Action Plan…","html":"<h2 id=\"5fs\"><a href=\"#5fs\" aria-label=\"5fs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5Fs</h2>\n<h3 id=\"1-fact\"><a href=\"#1-fact\" aria-label=\"1 fact permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Fact</h3>\n<h4 id=\"1-네트워크\"><a href=\"#1-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\" aria-label=\"1 네트워크 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 네트워크</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- TCP/IP는 통신 프로토콜로 TCP라고 불리는 프로토콜과 IP라고 불리는 프로토콜의 세트이다.\n- TCP/IP 계층\n    1. 네트워크 인터페이스층 : 네트워크용 하드웨어에 직접 연결되어 있는 컴퓨터끼리 통신할 수 있도록 하는 기능을 구현\n        - 대표적으로 이더넷이 있고 무선을 사용해서 LAN기능을 취하는 Wi-Fi도 이 층의 기능이다.\n        - 이층을 구성하는 하드웨어는 각 고유의 MAC주소를 갖는다.\n        - 프로토콜\n            1. ARP(adress resolution protocol) : ip주소에서 mac주소를 얻는 프로토콜\n            2. RARP 역순 주소 결정 프로토콜\n    2. 인터넷층 : 네트워크 인터페이스층을 기반으로 중계 등의 기능을 추가해서 직접 연결되어 있지 않는 대상, 즉 다른 네트워크 내의 대상과 통신할 수 있는 기능을 구현한다. 다시 말하면 복수개의 네트워크를 연결하여 서로 패킷을 교환하는 기능을 한다.\n        - 이층에서 핵심은 패킷 중계기능이다. 라우팅이라고 한다.\n        - 이츠에서는 네트워크에 접속한 컴퓨터를 식별하기 위한 IP주소가 있고 IP는 중복 허용이 되지 않는다.\n    3. 트랜스포트층 : 인터넷층이 만들어낸 임의의 컴퓨터끼리의 통신 기능을 기반으로 네트워크의 목적에 따른 특성을 가진 통신을 구현\n        - 프로토콜\n            1. TCP : 먼저 대상끼리 연결 시켜야 하고, 통신하는 사이 패킷에 문제가 있거나 일부 패킷이 손실되거나 또는 패킷의 순서가 바뀌면 해당 오류를 해결하므로 신뢰도가 높은 통신을 구현하는데 사용된다. HTTP, SMTP 등에 사용된다.\n                - 대상이 응답을 하든 일정 범위까지 마음대로 데이터를 보내는 방법을 사용하며 슬라이딩 윈도우 구조로 구현된다.\n                - 통신 시작전 3way handshake라고 불리는 방법으로 통신 직전에 준비를 한다.\n            2. UDP : 통신의 신뢰도를 높이는 작업은 전혀 하지 않지만 바로 사용할 수 있는 가벼운 통신 기능을 제공한다. 음악 또는 영상 스트리밍, 인터넷 전화 등에 사용된다.\n    4. 애클리케이션층 : 개별 어플리케이션의 기능을 구현한다. HTTP, SMTP, POP3, IMAP4등의 프로토콜이 존재한다.\n        - 프로토콜 종류\n            1. HTTP\n            2. SMTP : 메일 송신에 사용됨\n            3. POP3 : 메일읽기에 사용됨\n            4. IMAP4 : 메일읽기에 사용됨\n            5. FTP : 파일 전송에 사용됨\n            6. DNS : 주소 해석에 사용됨\n            7. NTP : 네트워크 시간 동기화에 사용됨\n        - 어플리케이션 계층은 인간이 어떤 목적을 이루고자 할 때 사용된다 하지만, 주소 해석에 사용되는 DNS 또는 네트워크 동기화에 사용되는 NTP는 인간이 아닌 컴퓨터가 사용하는 프로토콜이다.\n- 표준규격인 OSI가 만들어졌지만, 너무 복잡하고 어려워 보급되지 않았고 TCP/IP가 간단하여 널리 보급되었다.\n- 레이어별 처리와 패킷\n    1. 프로토콜 스택을 구성하는 각 레이어는 아래위로 인접하는 층과 연계해서 통신하고, 데이터를 전송하는 측에서 상위 층에서 받은 데이터를 기반으로 처리하며 그 통신처리에 필요한 각종 정보(헤더)를 데이터 본체 앞에 추가한다.\n    2. 수신 받는 측에선 하위층에서 받은 패킷에 포함된 헤더 부분의 정보를 사용하고 헤더를 제거한 후에 상위층으로 넘긴다. 상위층으로 올라갈수록 하위 층의 헤더는 제거되고 송신측에서 전송한 데이터만 남는다.\n- IP Address : IP라고 불리는 프로토콜을 사용하는 네트워크에서 각 컴퓨터를 식별하기 위해 컴퓨터에 부여된 번호.\n    1. 독립 되어져있는 네트워크에서는 규칙을 따르지 않을 수 있지만 인터넷 규칙에 맞춰서 IP를 할당 하는것이 일반적이다.\n    2. IP 주소 할당은 계층적이다.\n    3. IP 주소는 ICANN에서 지역 인터넷 레지스트리에 대해 IP주소의 일정 범위를 할당 받는다.\n- 포트번호는 트랜스포트층에서 TCP 또는 UDP가 제공하는 기능이 대상이 갖고 있는 어떤 기능과 접속할지 지정하기 위해 사용한다.\n    1. 컴퓨터 한대가 여러 기능을 가질때 port를 이용하여 어떤 기능을 사용하는지 구분 가능\n    2. 0 ~ 1023 까지는 well-known port이다.\n    3. TCP 통신에서는 시작할 때 연결하기 위한 대상의 IP 주소에 맞춰 서비스를 특정하는 port를 지정한다.\n    4. UDP 통신 또한 대상 IP, 대상 port, 자신의 ip, 자신의 port 이렇게 4개를 사용한다.\n- IP 주소는 인터넷에 접속하는 컴퓨터를 식별하는 기능이 있고 다른 데와 중복되지 않도록 할당되고 전 세계에서 유일한 IP를 공인 IP라고 부르고, 그렇지 않은 것은 사설 IP라고 한다.\n    1. 사설 IP는 조직이나 가정등의 내부 네트워크에서 사용하며 어떤 조직과 그 외 다른 조직에서 사설 IP주소가 중복되도 문제없다.\n- IP주소의 클래스와 넷마스크\n    1. IP주소는 32개 비트로 표시하며 왼쪽의 네트워크부와 오른쪽의 호스트부로 나뉠 수 잇다.\n    2. 네트워크 부는 어떤 네트워크를 특정하는 정보고, 호스트부는 그 네트워크 안에 있는 컴퓨터를 특정한다.\n    3. 클래스라는 개념이 있으며, 한개의 네트워크 주소 안에서 몇대의 컴퓨터를 구별할 수 있는지로 나뉘어져 있다.\n    4. 네트워크 부를 알고 싶을 때는 넷마스크를 이용한다.\n        - 네트워크 부분을 1로 한 비트의 나열을 넷마스크라고 부르며 AND연산을 하면 네트워크 주소를 얻을 수 있다.\n- subnet 과 subnetmask\n    1. 네트워크를 분리하여 브로드캐스트가 닿는 범위를 한정하고 장애범위를 최소화 하기 위해 네트워크를 물리적인 배치나 조직등을 단위로 해서 작은 네트워크를 만들고 이를 연결한다.\n    2. 작은 네트워크를 나눠 연결하는 구성을 서브넷 화라고 한다.\n    3. 호스트 부의 일부까지 네트워크 부로 연장하여 사용한다.\n    4. 서브넷 화 하는 경우 넷마스크를 서브넷 마스크라고 하고 네트워크부가 연장되면 서브넷마스크로 연장된다.\n- 브로드 캐스트와 멀티캐스트\n    1. 브로드캐스트 : 동일한 이더넷에 접속해 있는 컴퓨터 전체로 데이터를 보내는 통신\n        - 255.255.255.255(리미티느 브로드캐스트)로 이더넷 내의 모든 컴퓨터로만 가고 라우터 밖으론 가지 않는다.\n        - ip주소의 호스트부 전체를 1로 만든 주소(directed broadcast address) 는 라우터 밖으로도 가지만, 실제로는 거의 전송되지 않으며 이 방법을 금지하는게 좋다.\n    2. 멀티캐스트 : 어떤 그룹에 포함된 특정 컴퓨터에 한정해서 데이터를 보내는 것이며, 클래스 D(224.0.0.0 ~ 239.255.255.255)주소가 사용된다.\n        - 라우터 전체가 여기에 반응해야할 필요가 있으며 외부로도 전송이 가능하다.\n    3. 유니캐스트 : 1:1 통신이다.\n- 허브 스위치\n    1. 허브 : 데이터 전송 기능만을 가짐\n        - 브로드 캐스트함.\n    2. 스위치 : 그 외의 각종 관리 기능(웹 화면의 설정, 내부 정보 읽기 등)이나 vlan기능 등을 가짐.\n        - 테이블이 존재하며, 특정 지점으로만 전송.\n    3. 허브/스위치는 신설이나 확장에 사용되고 새로 PC나 서버에서 네트워크를 만들 경우 사용됨.\n    4. 이더넷을 두개의 허브와 스위치로 연결하면 한개의 이더넷 그룹이 됨.\n- 라우터\n    1. 네트워크의 프로토콜인 IP로 IP패킷을 전송\n    2. 서로 독립되어 있는 이더넷 네트워크 사이에서 양쪽의 패킷을 중계한다.\n    - 독립된 두개의 이더넷으로 연결된 네트워크 가운데에 라우터를 둠으로 통신이 가능해짐</code></pre></div>\n<h4 id=\"2-코틀린\"><a href=\"#2-%EC%BD%94%ED%8B%80%EB%A6%B0\" aria-label=\"2 코틀린 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 코틀린</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 코루틴 구현은 비동기 어플리케이션 빌드를 위한 유용한 도구이다.\n- 코루틴은 코드 블록을 실행하고 비슷한 라이프 사이클을 가졌ㅈ만 반환값이나 예이ㅗ를 사용해 완료할 수 있는 가벼운 스레드이다.\n- 코루틴은 중지 가능한 계산의 인스턴스며, 일시 중단할 수 있는 계산이다.\n- 코루틴은 특정 스레드에 바인딩 되지 않으며, 한 스레드에서 일시 중지하고 다른 스레드를 재개할 수 있다.\n- API  \n    1. runBlocking : 코루틴을 생성한 수 코루틴이 끝나고 그 결과값을 반환할 때까지 현재 스레드를 블록한다.\n    2. launch : 스레드 블록 없이 새 코루틴을 생성하고 job을 반환\n    3. delay : 스레드 블록 없이 현재 코루틴을 지연\n    4. suspend : 스레드의 블록 없이 코루틴의 실행을 일시 중지할 수 있는 함수.\n- 병렬화\n    1. 동기화\n        - 매우 낮은 코드 복잡성을 가짐\n        - 느린 퍼포먼스로 매우 낮은 자원 소모\n    2. 콜백\n        - 매우 높은 어댑터?가 필요하고 복제가 필요. 중첩된 콜백은 읽기 어려움\n        - 자원 소비가 높고 공유ㅠ Executor를 사용하면 나아지지만 복잡도 상승\n    3. 퓨처\n        - 코드 복잡성은 중간이며, Excutors와 get은 덜 복잡함.\n        - 리소스 소비는 높지만 다른 executor구현과 공유 executor로 세부 조정이 가능하지만 이 경우 복잡성이 올라감.\n    4. 프로미스\n        - 코드 복잡성은 중간이며 퓨처 스타일을 사용하면 성능에 영향을 주지 않고 코루틴 만큼 깔끔하게 표현 가능\n        - 리소스 소비가 높고 최고의 퍼포먼스를 갖지만 변경없이 미세조정할 수 있다.\n    5. 코루틴\n        - 코드 복잡성 낮고 비동기 작업을 위한 명시적 블록을 사용하는 비동기 스타일과 비슷한 크기\n        - 리소스 소비 낮고, 최상의 성능.\n- 코루틴은 항상 컨텍스트에서 실행된다?</code></pre></div>\n<h4 id=\"2feelings\"><a href=\"#2feelings\" aria-label=\"2feelings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.Feelings</h4>\n<ol>\n<li>네트워크 재미있었다.</li>\n<li>코딩을 할 시간이 없다..</li>\n<li>코틀린 너무 어렵다..</li>\n</ol>\n<h4 id=\"3findings\"><a href=\"#3findings\" aria-label=\"3findings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.Findings</h4>\n<ol>\n<li>넷마스크가 IP의 네트워크 부를 알고 싶을 때는 넷마스크를 이용한다는 것을 알게 되었다.</li>\n<li>\n<p>코틀린에서 비동기 방식을 위한 여러가지 방식이 있는것을 알게 되었다.</p>\n<ul>\n<li>콜백</li>\n<li>퓨처</li>\n<li>프로미스</li>\n<li>코루틴</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4future-action-plan\"><a href=\"#4future-action-plan\" aria-label=\"4future action plan permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.Future Action Plan</h4>\n<ol>\n<li>코틀린 스터디가 끝나기 전까지는 스터디 할 때 책을 코틀린으로 최대한 많이 하고 객체지향언어와 다른 책들은 내가 따로 읽어야 겠다.</li>\n<li>코딩을 해야되는데 ..</li>\n</ol>\n<h3 id=\"5feedback\"><a href=\"#5feedback\" aria-label=\"5feedback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.FeedBack</h3>","frontmatter":{"title":"2020-02-03 TIL","date":"February 03, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/til/2020-02-03/","previous":{"fields":{"slug":"/dailyjournal/2020-02-02/"},"frontmatter":{"title":"2020-02-02 dailyJournal","category":"dailyJournal"}},"next":{"fields":{"slug":"/dailyjournal/2020-02-03/"},"frontmatter":{"title":"2020-02-03 dailyJournal","category":"dailyJournal"}}}}