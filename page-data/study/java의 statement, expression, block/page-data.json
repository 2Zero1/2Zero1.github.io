{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/java의 statement, expression, block/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7c93a5e2-2c8e-58aa-83d0-704133a311b8","excerpt":"Expressions 값식 연산식 호출식 Expresion은 variables, operators, method invocations 들로 이루어진 construct 이며 하나의 단일 값 이다. expression으로 인해 반환된 value의 data type은 expression에서 사용된 elements에 결정된다. “cadence = 0” expression 은 정수를 리턴한다. 이경우 cadence는 정수타입이다. assignment operator…","html":"<h2 id=\"expressions\" style=\"position:relative;\"><a href=\"#expressions\" aria-label=\"expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expressions</h2>\n<ul>\n<li>값식</li>\n<li>연산식</li>\n<li>호출식</li>\n</ul>\n<p>Expresion은 variables, operators, method invocations 들로 이루어진 construct 이며 하나의 단일 값 이다.</p>\n<p>expression으로 인해 반환된 value의 data type은 expression에서 사용된 elements에 결정된다. “cadence = 0” expression 은 정수를 리턴한다. 이경우 cadence는 정수타입이다. assignment operator가 왼쪽  피연산자와 동일한 데이터 유형의 값을 반환한다. 다른 expressions에서도 cadence 가 boolean 또는 String 타입이라면 cadence의 데이터타입의 값을 리턴한다.</p>\n<p>java는 표현식들의 데이타 타입이 일치한다면 밑의 코드와 같이 여러 작은 표현식들을 사용하여 복합적인 expressions를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span></code></pre></div>\n<p>expression을 사용할 땐 연산자 우선순위를 고려해야한다. 그렇기 때문에 명확하게 사용하기 위해서 bracket을 명시적으로 표시해줘야한다.</p>\n<h2 id=\"statements\" style=\"position:relative;\"><a href=\"#statements\" aria-label=\"statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Statements</h2>\n<ul>\n<li>선언문</li>\n<li>제어문</li>\n<li>식문</li>\n<li>위의 세가지 방법으로 나누는 것과 중문과 단문으로 나누는 방식이 있다.</li>\n</ul>\n<p>statements는 실제 언어로 사용하는 문장들과 거의 비슷하다. statement 한 완전한 실행 유닛을 형성한다. 밑에있는 종류의 expression 세미콜론을 사용하여 표현식을 종료하고 statement로 만들 수 있다.</p>\n<ul>\n<li>Assignment expressions</li>\n<li>Any use of ++ or —</li>\n<li>Method invocations</li>\n<li>Object creation expression</li>\n</ul>\n<p>밑의 statements 들은 expression statement라고 불린다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// assignment statement</span>\naValue <span class=\"token operator\">=</span> <span class=\"token number\">8933.234</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// increment statement</span>\naValue<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// method invocation statement</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//object creation statement</span>\n<span class=\"token class-name\">Bicycle</span> myBike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>추가적으로 expression statements에는 declaration statements와 control flow statements 가 존재한다.</p>\n<p>declaration statement 는 변수를 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// declaration statement</span>\n<span class=\"token keyword\">double</span> aValue <span class=\"token operator\">=</span> <span class=\"token number\">8933.234</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드는 위에서 아래로 순서대로 실행이 된다. 하지만 control statements는 branch와 looping을 만들어 프로그램이 상태에 따라 실행이 되도록 한다.</p>\n<p>decision-making statements</p>\n<ul>\n<li>if -then</li>\n<li>if -then-else</li>\n<li>switch</li>\n</ul>\n<p>looping statements</p>\n<ul>\n<li>for</li>\n<li>while</li>\n<li>do-while</li>\n</ul>\n<p>branch statements</p>\n<ul>\n<li>break</li>\n<li>continue</li>\n<li>return</li>\n</ul>\n<h2 id=\"blocks\" style=\"position:relative;\"><a href=\"#blocks\" aria-label=\"blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blocks</h2>\n<p>block은 중괄호 사이에 0개 이상의 statement로 구성된 그룹이며 단일 문이 허용되는 모든곳에서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockDemo</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">boolean</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// begin block 1</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Condition is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token comment\">// end block one</span>\n          <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// begin block 2</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Condition is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token comment\">// end block 2</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"java의 expression, statement, block","date":null}}},"pageContext":{"slug":"/study/java의 statement, expression, block/","previous":{"fields":{"slug":"/study/kotlin continuation & cps/"},"frontmatter":{"title":"코틀린 코드스피츠 continuation & cps 녹취록","category":"study"}},"next":{"fields":{"slug":"/study/booklist/"},"frontmatter":{"title":"Book List","category":"BookList"}}}},"staticQueryHashes":["3128451518","96099027"]}