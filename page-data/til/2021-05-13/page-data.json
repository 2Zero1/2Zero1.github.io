{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-05-13/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e9ca3c56-1144-5ee9-b413-ae46ef7f8dcf","excerpt":"fact 이전 프로젝트 리팩터링 오브젝트 책 읽기 리액트 강의 보기 feelings 오브젝트를 두번째 읽고 있는데 소설책을 읽는것같다. 온전한 성장을 하고있다. finding object 6장 메시지와 인터페이스 명령-쿼리 분리 원칙(Command-Query Separation)원칙 어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈을 루틴(routine)이라고 부른다. 루틴은 다시 프로시저(procedure)와 함수(function)으로 구분할 수 있다. procedure…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>이전 프로젝트 리팩터링</li>\n<li>오브젝트 책 읽기</li>\n<li>리액트 강의 보기</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>오브젝트를 두번째 읽고 있는데 소설책을 읽는것같다.</li>\n<li>온전한 성장을 하고있다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>object 6장 메시지와 인터페이스</p>\n<ol>\n<li>\n<p>명령-쿼리 분리 원칙(Command-Query Separation)원칙</p>\n<ul>\n<li>어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈을 루틴(routine)이라고 부른다.</li>\n<li>\n<p>루틴은 다시 프로시저(procedure)와 함수(function)으로 구분할 수 있다.</p>\n<ul>\n<li>\n<p>procedure</p>\n<ul>\n<li>정해진 절차에 따라 내부의 상태를 변경하는 루틴의 한 종류</li>\n<li>부수효과를 발생시킬 수 있지만 값을 반화낳ㄹ 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>function</p>\n<ul>\n<li>어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴의 한 종류</li>\n<li>값을 반환할 수 있지만 부수효과를 발생시킬 수 없다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>객체의 상태를 수정하는 오퍼레이션을 <strong><em>명령</em></strong>이라고 부르고 객체와 관련된 정보를 반환하는 오퍼레이션을 <strong><em>쿼리</em></strong>라고 부른다.</li>\n<li>명령은 프로시저와 동일하고 쿼리는 함수와 동일하다.</li>\n<li>명령-쿼리 분리 원칙의 요지는 오퍼레이션은 부수효과를 발생시키는 명령이거나 부수효과를 발생시키지 않는 쿼리 중 하나여야 한다.</li>\n<li>\n<p>명령과 쿼리를 분리하기 위해 다음의 두 규칙을 준수해야한다.</p>\n<ul>\n<li>객체의 상태를 변경하는 명령은 반환값을 가질 수 없다.</li>\n<li>객체의 정보를 반환하는 쿼리는 상태를 변경할 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>명령-쿼리 분리 원칙을 한 문장으로 표현하면 ‘질문이 답변을 수정해선 안된다.’</p>\n<ul>\n<li>명령은 상태를 변경할 수 있지만 상태를 반환해서는 안된다.</li>\n<li>쿼리는 객체의 상태를 반환할 수 있지만 상태를 변경해선 안된다.</li>\n</ul>\n</li>\n<li>명령-쿼리 분리 원칙을 따르는 인터페이스를 사용함으로써 캡슐화와 다양한 문맥에서의 재사용을 보장할 수 있다.</li>\n<li>명령-쿼리 원칙에 따라 작성된 객체의 인터페이스를 명령-쿼리 인터페이스(Command-Query Interface)라고 한다.</li>\n<li>명령 쿼리 원칙을 지키지 않으면 실행 결과를 예측하기 어려워질 수 있다. 겉으로 보기에 쿼리처럼 보이지만 내부적으로 부수효과를 가지는 메서드는 이해하기 어렵고, 잘못 사용하기 쉬우며, 버그를 양산하는 경향이 있다.(p208 예제)</li>\n<li>명령-쿼리 분리 원칙을 따르면 코드는 예측 가능하고 이해하기 쉬우며 디버깅이 용이한 동시에 유지보수가 수월해진다.</li>\n</ul>\n</li>\n<li>\n<p>명령-쿼리 분리와 참조 투명성</p>\n<ul>\n<li><strong><em>참조 투명성이란 어떤 표현식 e가 있을 때 값으로 e가 나타나는 모든 위치를 교체하더라도 결과가 달라지지 않는 특성을 의미한다.</em></strong>(p.212)</li>\n<li>참조 투명성(referential transparency)의 장점을 제한적이나마 누릴 수 있게 된다. 참조 투명성이라는 특성을 잘 활용하면 버그가 적고 디버깅이 용이하며, 쿼리의 순서에 따라 실행 결과가 변하지 않는 코드를 작성할 수 있다.</li>\n<li>컴퓨터의 세계와 수학의 세곌ㄹ 나누는 가장 큰 특징은 side effect 존재유무이다. 프로그램에서 부수효과를 발생시키는 두 가지 대표적인 문법은 대입문과 procedure이다.</li>\n<li><strong><em>어떤 값이 변하지 않는 성질을 불변성(immutable)이라고 한다.</em></strong> 어떤 값이 불변한다는 말은 부수효과가 발생하지 않는다는 말과 동일하다.</li>\n<li>수학에서의 함수는 어떤 값도 변경하지 않기 때문에 부수효과가 존재하지 않는다. 그리고 부수효과가 없는 없는 불변의 세상에서는 모든 로직이 참조 투명성을 만족시킨다. 따라서 <strong><em>불변성은 부수효과의 발생을 방지하고 참조 투명성을 만족시킨다.</em></strong></li>\n<li>\n<p>참조 투명성의 또다른 장점은 식의 순서를 변경하더라도 결과가 달라지지 않는다는 것이다.</p>\n<ul>\n<li>f(1) - 1 = 2</li>\n<li>f(1) * 2 = 6</li>\n<li>f(1) + f(1) = 6</li>\n<li>위의 식의 순서가 변하더라도 각 식의 값은 변하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>참조 투명성을 만족하는 식은 우리에게 두 가지 장점을 제공한다.</p>\n<ol>\n<li>모든 함수를 이미 알고 있는 하나의 결괏값으로 대체할 수 있기 때문에 식을 쉽게 계산할 수 잇다.</li>\n<li>모든 곳에서 함수의 결괏값이 동일하기 때문에 식의 순서를 변경하더라도 각 식의 결과는 달라지지 않는다.</li>\n</ol>\n</li>\n<li>객체지향 패러다임이 객체의 상태 변경이라는 부수효과를 기반으로 하기 때문에 참조 투명성은 예외에 가깝다.</li>\n<li>하지만 명령-쿼리 분리 원칙을 사용하면 이 균열을 조금 줄일 수 있다.</li>\n<li>명령-쿼리 분리 원칙은 부수효과를 가지는 명령으로부터 부수효과를 가지지 않는 쿼리를 명백하게 분리함으로써 제한적이나마 참조 투명성의 혜택을 누릴 수 있게 된다.</li>\n<li>부수효과를 기반으로 하는 프로그래밍 방식을 명령형 프로그래밍(imperactive programming)이라고 부르며 명령형 프로그래밍은 상태를 변경시키는 연산들을 적절한 순서대로 나열함으로써 프로그램을 작성한다. 대부분의 객체지향 언어들은 메시지에 의한 객체의 상태 변경에 집중하기 때문에 명령형 언어로 분류된다.</li>\n</ul>\n</li>\n<li>\n<p>책임을 초점에 맞춰라</p>\n<ul>\n<li>디미터 법칙을 준수하고 묻지 말고 시켜라 스타일을 따르면서도 의도를 드러내는 인터페이스를 설계하는 쉬운 방법은 메시지를 선택하고 그 후에 메시지를 처리할 객체를 선택하는것.</li>\n<li>명령과 쿼리를 분리하고 계약에 의한 설계 개념을 통해 객체의 협력 방식을 명시적으로 드러낼 수 있는 방법은 객체의 구현 이전에 객체 사이의 협력에 초점을 맞추고 협력 방식을 단순하고 유연하게 만드는것이다. 이 모든 방식의 중심에는 객체가 수행할 책임이 위치한다.</li>\n<li>\n<p>메시지를 먼저 선택함으로 디미터 법칙, 묻지 말고 시켜라 스타일, 의도를 드러내는 인터페이스, 명령-쿼리 분리 원칙에 미치는 긍정적 영향</p>\n<ol>\n<li>\n<p>디미터 법칙</p>\n<ul>\n<li>협력이라는 컨텍스트 안에서 객체보다 메시지를 먼저 결정하면 두 객체 사이의 구조적인 결합도를 낮출 수 있다. 수신할 객체를 알지 못한 상태에서 메시지를 먼저 선택하기 때문에 객체의 내부 구조에 대해 고민할 필요가 없어진다. 따라서 메시지가 객체를 선택하게 함으로써 의도적으로 디미터 법칙을 위반할 위험을 최소화할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>묻지 말고 시켜라</p>\n<ul>\n<li>메시지를 먼저 선택하면 묻지 말고 시켜라 스타일에 따라 협력을 구조화하게 된다. 클라이언트의 관점에서 메시지를 선택하기 때문에 필요한 정보를 물을 필요 없이 원하는 것을 표현한 메시지를 전송하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>의도를 드러내는 인터페이스</p>\n<ul>\n<li>메시지를 먼저 선택한다는 것은 메시지를 전송하는 클라이언트의 관점에서 메시지의 이름을 정한다는 것이다. 당연히 그 이름에는 클라이언트가 무엇을 원하는지, 그 의도가 분명하게 드러날 수 밖에 없다.</li>\n</ul>\n</li>\n<li>\n<p>명령-쿼리 분리 원칙</p>\n<ul>\n<li>메시지를 먼저 선택한다는 것은 협력이라는 문맥 안에서 객체의 인터페이스안에 관해 고민한다는 것을 의미한다. 객체가 단순히 어떤 일을 해야하는지뿐만 아니라 협력 속에서 객체의 상태를 예측하고 이해하기 쉽게 만들기 위한 방법에 관해 고민하게 된다. 따라서 예측 가능한 협력을 만들기 위해 명령과 쿼리를 분리하게 될것이다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>협력을 위해 두 객체가 보장해야 하는 실행 시점의 제약을 인터페이스에 명시할 수 있는 방법이 존재하지 않다는 것이다.</li>\n<li>위의 문제를 해결하기 위해 계약에 의한 설계(Design By Contract) 개념이 있다.</li>\n<li>계약에 의한 설계는 협력을 위해 클라이언트와 서버가 준수해야 하는 제약을 코드상에 명시적으로 표현하고 강제할 수 있는 방법이다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>처음에 잠깐 느려도 괜찬으니 내 페이스대로 하자</li>\n<li>내일은 오브젝트 7장을 20페이지 읽는다.</li>\n<li>리액트 page 부분 리팩터링을 진행한다.</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-05-13 TIL","date":"May 13, 2021"}}},"pageContext":{"slug":"/til/2021-05-13/","previous":{"fields":{"slug":"/til/2021-05-11/"},"frontmatter":{"title":"2021-05-11 TIL","category":"TIL"}},"next":{"fields":{"slug":"/study/하루3분 네트워크5/"},"frontmatter":{"title":"하루 3분 네트워크 스터디 5","category":"study"}}}},"staticQueryHashes":["3128451518","96099027"]}