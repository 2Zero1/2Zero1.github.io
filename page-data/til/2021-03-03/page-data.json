{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/2021-03-03/","result":{"data":{"site":{"siteMetadata":{"title":"Zero1's Note","author":"Zero1","siteUrl":"https://github.com/2Zero1","comment":{"disqusShortName":"2Zero1","utterances":"2Zero1 Blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"bee3cf84-4a0c-5027-8fa6-129e011e4f58","excerpt":"fact 코드숨 5강 풀이 보고 리팩터링 하기 코드숨 6강 문서 읽기 코드숨 6강 동영상 보기 코드숨 6강 보면서 따라치기 코드숨 6강 안보고 강의 부분 해보기 퇴사 회고 작성하기 DOM을 깨우치다 20페이지 읽기 자기전에 object 읽다 자기 feelings 오늘 계획한 일정을 모두 완수해서 기분이 좋다. 오늘 약 3시간 마다 한번씩 30분씩 걷다가 왔다. 공부할 시간이 많아서 행복하다. finding 코드숨 router 강의에서 나만의 목차를 만들었다. 잘못된 url 접근 처리 window…","html":"<ol>\n<li>\n<p>fact</p>\n<ul>\n<li>코드숨 5강 풀이 보고 리팩터링 하기</li>\n<li>코드숨 6강 문서 읽기</li>\n<li>코드숨 6강 동영상 보기</li>\n<li>코드숨 6강 보면서 따라치기</li>\n<li>코드숨 6강 안보고 강의 부분 해보기</li>\n<li>퇴사 회고 작성하기</li>\n<li>DOM을 깨우치다 20페이지 읽기</li>\n<li>자기전에 object 읽다 자기</li>\n</ul>\n</li>\n<li>\n<p>feelings</p>\n<ul>\n<li>오늘 계획한 일정을 모두 완수해서 기분이 좋다.</li>\n<li>오늘 약 3시간 마다 한번씩 30분씩 걷다가 왔다.</li>\n<li>공부할 시간이 많아서 행복하다.</li>\n</ul>\n</li>\n<li>\n<p>finding</p>\n<ul>\n<li>\n<p>코드숨 router</p>\n<ul>\n<li>\n<p>강의에서 나만의 목차를 만들었다.</p>\n<ol>\n<li>잘못된 url 접근 처리</li>\n<li>window.location.pathname을 이용한 간단한 라우터</li>\n<li>라우팅 테이블을 이용한 웹 router</li>\n<li>browser Router</li>\n<li>switch</li>\n<li>route</li>\n<li>memory Router</li>\n<li>Link</li>\n<li>Memory Router를 이용한 test 코드 작성</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>DOM을 깨우치다 (1p~20p)</li>\n<li>Document Object Model(DOM)은 자바스크립트 Node 개체의 계층화된 트이다.</li>\n<li>브라우저는 HTML 코드를 해석해서 트리 형태로 구조화된 노드들을 가지고 있는 DOM을 생성한다.</li>\n<li>HTML 문서가 브라우저에 의해 해석되어 실제 문서를 나타내는 노드 개체들의 트리 구조로 변환된다.</li>\n<li>DOM의 목적은 JS를 사용해서 이 문서에 대한 스크립트 작성(삭제, 추가, 변경, 이벤트처리, 바꾸기)를 위한 프로그래밍 인터페이스를 제공하는 것이다.</li>\n<li>자주 사용되는 노드 개체 유형</li>\n<li>DOCUMENT_NODE (window.document)</li>\n<li>ELEMENT_NODE(body, a, p script, style, html, h1)</li>\n<li>ATTRIBUTE_NODE(class=“funEdges”)</li>\n<li>TEXT_NODE(줄바꿈과 공백을 포함한 HTML 문서 내의 텍스트 문자)</li>\n<li>DOCUMENT<em>FRAGMENT</em>NODE(document.createDocumentFragment())</li>\n<li>DOCUMENT<em>TYPE</em>NOED <!DOCTYPE html>)</li>\n<li>모든 노드 유형이 Node로 부터 상속받으며 뿐만아니라 상속 체인이 길어질 수도 있다.</li>\n<li>Object &#x3C; Node &#x3C; Element &#x3C; HTMLElement&#x3C; (예: HTML * Element)</li>\n<li>모든 노드가 prototype 체인의 속성뿐만 아니라 생성자로부터 일련의 기본 속성 및 메서드를 상속받는다.</li>\n<li>모든 노드 개체가 Node 개체로 부터 상속 속성과 메서드를 상속 받으며, 이는 DOM을 조작, 조사, 탐색하는 기준이 되는 값과 함수이다.</li>\n<li>자주 사용되는 Node 속성 및 메서드며 하위 노드 인터페이스에 속한 노드들을 다루기 위한 관련 속성들이다.</li>\n<li>\n<p>Node 속성</p>\n<ol>\n<li>childNodes</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>nextSibling</li>\n<li>nodeName</li>\n<li>nodeName</li>\n<li>nodeType</li>\n<li>nodeValue</li>\n<li>parentNode</li>\n<li>previousSibling</li>\n</ol>\n</li>\n<li>\n<p>Node 메서드</p>\n<ol>\n<li>appendChild()</li>\n<li>cloneNode()</li>\n<li>compareDocumentPosition()</li>\n<li>contains()</li>\n<li>hasChildNode()</li>\n<li>insertBefore()</li>\n<li>isEqualNode()</li>\n<li>removeChild()</li>\n<li>replaceChild()</li>\n</ol>\n</li>\n<li>\n<p>Document 메서드</p>\n<ol>\n<li>document.createElement()</li>\n<li>document.createTextNode()</li>\n</ol>\n</li>\n<li>\n<p>HTML *Element 속성</p>\n<ol>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>textContent</li>\n<li>innerText</li>\n<li>outerText</li>\n<li>firstElementChild</li>\n<li>lastElementChild</li>\n<li>nextElementChild</li>\n<li>previousElementChild</li>\n<li>children</li>\n</ol>\n</li>\n<li>\n<p>HTML Element 메서드</p>\n<ol>\n<li>insertAdjacentHTML()</li>\n</ol>\n</li>\n<li>Node로 부터 상속받는 nodeType 및 nodeName속성은 노드의 유형과 이름을 식별하기 위해 사용되며 노드의 유형을 판별하는 가장 빠른 방법은 nodeType 속성을 확인하는 것이다.</li>\n<li>nodeValue 속성은 TextNode와 Comment 제외한 대부분의 노드에서 null을 반환하며 이들의 용도는 text와 comment 노드에서 실제 텍스트 문자열을 추출을 위함이다.</li>\n<li>브라우저가 HTML 문서를 해석할때 HTML 파일 내용을 기반으로 노드와 트리를 구성하며 브라우저는 HTML 문서를 초기 로딩할 때 노드 생성을 처리하지만 js를 사용해서 직접 노드를 생성하는 것도 가능하다.</li>\n<li>createElement()</li>\n<li>createTextNode()</li>\n<li>js 문자열을 사용하여 DOM에 element 및 text 노드를 생성 및 추가할 수 있다.</li>\n<li>innerHTML : HTML 파서를 호출하여 문자열을 파싱한 후에 HTML 요소를 실제 DOM 노드로 변환하여 DOM에 추가</li>\n<li>outerHTML : 위와 같이 파싱한 후에 내용을 해당 DOM을 대체함.</li>\n<li>textContext : textNode를 생성 파싱하지 않고 단순 text로 들어간다.</li>\n<li>insertAdjacentHTML : 시작 태그의 앞, 뒤, 종료태그의 앞, 뒤에 노드를 삽입이 가능하게 해준다. 하지만 beforebegin 및 afterend옵션은 노드가 DOM 트리 내에 존재하고 부모 요소를 가진 경우에만 동작한다.</li>\n<li>appendChild 및 insertBefore 노드 메서드는 js 노드 개체를 DOM 트리에 삽입할 수 있게 해준다.</li>\n<li>appendChild : 하나 또는 여러 노드를 메서드가 호출된 노드의 자식 노드 끝에 삽입할 수 있게 해준다.</li>\n<li>insertBefore : 자식 노드 목록 끝에 노드를 추가하는 것 외 삽입 위치를 조정하는 것이 필요할 경우 사용 되며, 첫번째 매개변수는 삽입될 노드와 두번째 매개변수는 삽입하고자 하는 문서 내의 참조 노드이다.</li>\n</ul>\n</li>\n<li>\n<p>Future Action Plan</p>\n<ul>\n<li>3시간 마다 걷기</li>\n<li>행복하게 코딩하기 못하는 것은 당연한것 ^^.. 못하니까 공부하는것 </li>\n<li>내가 만든 목차에 살 붙혀서 정리하기</li>\n<li>6강 안보고 다시 쳐보기</li>\n<li>6강 계획 세우기</li>\n<li>dom 책읽기</li>\n<li>이력서 준비</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"2021-03-02 TIL","date":"March 02, 2021"}}},"pageContext":{"slug":"/til/2021-03-03/","previous":{"fields":{"slug":"/til/2021-02-28/"},"frontmatter":{"title":"2021-02-28 TIL","category":"TIL"}},"next":{"fields":{"slug":"/til/2021-03-02/"},"frontmatter":{"title":"코드숨 리액트 5주차 회고","category":"주간회고"}}}},"staticQueryHashes":["3128451518","96099027"]}